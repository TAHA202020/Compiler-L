Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
virgule = ',';
nombre = chiffre+;
identif = alpha alphanum*;
plus='+';
minus='-';
mult='*';
div='/';
lp='(';
rp=')';
equal='=';
startfunc='{';
endfunc='}';
virgul=',';
pv=';';
return='return';
entier='entier';
boolean='bool';
mainfunc='main()';
Ignored Tokens

espaces, commentaire;

Productions
type={entier}entier|{boolean} boolean ;
op={plus}plus|{minus}minus|{mult}mult|{div}div;
declare={equalanother}type [first]:identif equal [second]:identif|{optwo}type [first]:identif equal [second]:identif op [third]:identif;
parameter= type identif;
parameters = {multiple} parameter virgul parameters |{single} parameter;
programme ={default} function programme | {main}main;
main = mainfunc parameters? startfunc instruction* endfunc;
instruction=declare;
function=type [first]:identif lp [funcparams]:parameters? rp [declaration]:parameters? startfunc instruction* return [second]:identif pv endfunc;
