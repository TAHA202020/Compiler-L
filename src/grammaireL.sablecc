Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
virgule = ',';
nombre = chiffre+;
pv = ';';
rp = '(';
lp = ')';
ao = '{';
af = '}';
co = '[';
cf = ']';
entier = 'entier';
bool = 'bool';
egale = '=';
mainfc = 'main()';
s_si = 'si';
alors = 'alors';
sinon = 'sinon';
tant_que = 'tantque';
faire = 'faire';
return = 'retour';
or = '|';
and = '&';
not = '!';
inf = '<';
plus = '+';
minus = '-';
mult = '*';
div = '/';
vrai = 'vrai';
faux = 'faux';
write = 'ecrire';
read = 'lire()';
identif = alpha alphanum*;
Ignored Tokens
espaces, commentaire;
Productions
programme = listedecvar? listedecfonc;
listedecfonc = fonction* main ;
fonction = type? identif rp arguments? lp listedecvar? bloc;
main = mainfc listedecvar? bloc;
listedecvar = var vvar*;
arguments = listedecvar ;
bloc = ao instruction* af ;
instruction = {affectation} affectation | {si} si | {tantque} tantque | {retour} retour | {appel} appel | {ecrire} ecrire | {lire} lire ;
lire = varname egale read pv;
ecrire = write rp expression lp pv;
affectation = varname egale expression pv ;
si = s_si expression alors bloc sinonbloc? ;
tantque = tant_que expression faire bloc ;
retour = return expression pv ;
appel = identif rp expressionvexp? lp pv ;
appel_sans_pv = identif rp expressionvexp? lp ;
expression = expou ;
expou = {multi} expou or expet | {single} expet ;
expet = {multi} expet and expnon | {single} expnon ;
expnon = {multi} not+ exp_comparaison_inf | {single} exp_comparaison_inf;
exp_comparaison_inf = {multi} exp_comparaison_inf inf exp_comparaison_egale | {single} exp_comparaison_egale ;
exp_comparaison_egale = {multi} exp_comparaison_egale egale exp_addition | {single} exp_addition ;
exp_addition = {multi} exp_addition plus exp_sub | {single} exp_sub ;
exp_sub = {multi} exp_sub minus exp_multiplication | {single} exp_multiplication;
exp_multiplication = {multi} exp_multiplication mult exp_div | {single} exp_div;
exp_div = {multi} exp_div div expression_primaire | {single} expression_primaire;
expression_primaire = {nombre} nombre | {p_expression} rp expression lp | {val_bool} valeurbool | {appel} appel_sans_pv | {var} varname ;
valeurbool = {vrai} vrai | {faux} faux;
type = {entier} entier | {bool} bool;
vvar = virgule var;
var = {var_simple} type identif | {tableau} typetab;
varname = {var_simple} identif | {var_tab} identif co expression cf;
typetab = type tabval;
tabval = identif co nombre cf;
sinonbloc = sinon bloc;
vexpression = virgule expression;
expressionvexp = expression vexpression*;

