/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AWriteInstruction extends PInstruction
{
    private TWrite _write_;
    private TLp _lp_;
    private PValue _value_;
    private TRp _rp_;
    private TPv _pv_;

    public AWriteInstruction()
    {
        // Constructor
    }

    public AWriteInstruction(
        @SuppressWarnings("hiding") TWrite _write_,
        @SuppressWarnings("hiding") TLp _lp_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TRp _rp_,
        @SuppressWarnings("hiding") TPv _pv_)
    {
        // Constructor
        setWrite(_write_);

        setLp(_lp_);

        setValue(_value_);

        setRp(_rp_);

        setPv(_pv_);

    }

    @Override
    public Object clone()
    {
        return new AWriteInstruction(
            cloneNode(this._write_),
            cloneNode(this._lp_),
            cloneNode(this._value_),
            cloneNode(this._rp_),
            cloneNode(this._pv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWriteInstruction(this);
    }

    public TWrite getWrite()
    {
        return this._write_;
    }

    public void setWrite(TWrite node)
    {
        if(this._write_ != null)
        {
            this._write_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._write_ = node;
    }

    public TLp getLp()
    {
        return this._lp_;
    }

    public void setLp(TLp node)
    {
        if(this._lp_ != null)
        {
            this._lp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TRp getRp()
    {
        return this._rp_;
    }

    public void setRp(TRp node)
    {
        if(this._rp_ != null)
        {
            this._rp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp_ = node;
    }

    public TPv getPv()
    {
        return this._pv_;
    }

    public void setPv(TPv node)
    {
        if(this._pv_ != null)
        {
            this._pv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._write_)
            + toString(this._lp_)
            + toString(this._value_)
            + toString(this._rp_)
            + toString(this._pv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._write_ == child)
        {
            this._write_ = null;
            return;
        }

        if(this._lp_ == child)
        {
            this._lp_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._rp_ == child)
        {
            this._rp_ = null;
            return;
        }

        if(this._pv_ == child)
        {
            this._pv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._write_ == oldChild)
        {
            setWrite((TWrite) newChild);
            return;
        }

        if(this._lp_ == oldChild)
        {
            setLp((TLp) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._rp_ == oldChild)
        {
            setRp((TRp) newChild);
            return;
        }

        if(this._pv_ == oldChild)
        {
            setPv((TPv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
