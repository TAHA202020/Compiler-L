/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AReturnstatementInstruction extends PInstruction
{
    private PReturnstatement _returnstatement_;

    public AReturnstatementInstruction()
    {
        // Constructor
    }

    public AReturnstatementInstruction(
        @SuppressWarnings("hiding") PReturnstatement _returnstatement_)
    {
        // Constructor
        setReturnstatement(_returnstatement_);

    }

    @Override
    public Object clone()
    {
        return new AReturnstatementInstruction(
            cloneNode(this._returnstatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReturnstatementInstruction(this);
    }

    public PReturnstatement getReturnstatement()
    {
        return this._returnstatement_;
    }

    public void setReturnstatement(PReturnstatement node)
    {
        if(this._returnstatement_ != null)
        {
            this._returnstatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnstatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._returnstatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._returnstatement_ == child)
        {
            this._returnstatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._returnstatement_ == oldChild)
        {
            setReturnstatement((PReturnstatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
