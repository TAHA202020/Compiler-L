/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import java.util.*;
import sc.analysis.*;

@SuppressWarnings("nls")
public final class ACondition extends PCondition
{
    private TSi _si_;
    private TLp _lp_;
    private PExpression _expression_;
    private TRp _rp_;
    private TAlors _alors_;
    private TStartfunc _startfunc_;
    private final LinkedList<PInstruction> _instruction_ = new LinkedList<PInstruction>();
    private TEndfunc _endfunc_;
    private PElsecondition _elsecondition_;

    public ACondition()
    {
        // Constructor
    }

    public ACondition(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") TLp _lp_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRp _rp_,
        @SuppressWarnings("hiding") TAlors _alors_,
        @SuppressWarnings("hiding") TStartfunc _startfunc_,
        @SuppressWarnings("hiding") List<?> _instruction_,
        @SuppressWarnings("hiding") TEndfunc _endfunc_,
        @SuppressWarnings("hiding") PElsecondition _elsecondition_)
    {
        // Constructor
        setSi(_si_);

        setLp(_lp_);

        setExpression(_expression_);

        setRp(_rp_);

        setAlors(_alors_);

        setStartfunc(_startfunc_);

        setInstruction(_instruction_);

        setEndfunc(_endfunc_);

        setElsecondition(_elsecondition_);

    }

    @Override
    public Object clone()
    {
        return new ACondition(
            cloneNode(this._si_),
            cloneNode(this._lp_),
            cloneNode(this._expression_),
            cloneNode(this._rp_),
            cloneNode(this._alors_),
            cloneNode(this._startfunc_),
            cloneList(this._instruction_),
            cloneNode(this._endfunc_),
            cloneNode(this._elsecondition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondition(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public TLp getLp()
    {
        return this._lp_;
    }

    public void setLp(TLp node)
    {
        if(this._lp_ != null)
        {
            this._lp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lp_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRp getRp()
    {
        return this._rp_;
    }

    public void setRp(TRp node)
    {
        if(this._rp_ != null)
        {
            this._rp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rp_ = node;
    }

    public TAlors getAlors()
    {
        return this._alors_;
    }

    public void setAlors(TAlors node)
    {
        if(this._alors_ != null)
        {
            this._alors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alors_ = node;
    }

    public TStartfunc getStartfunc()
    {
        return this._startfunc_;
    }

    public void setStartfunc(TStartfunc node)
    {
        if(this._startfunc_ != null)
        {
            this._startfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startfunc_ = node;
    }

    public LinkedList<PInstruction> getInstruction()
    {
        return this._instruction_;
    }

    public void setInstruction(List<?> list)
    {
        for(PInstruction e : this._instruction_)
        {
            e.parent(null);
        }
        this._instruction_.clear();

        for(Object obj_e : list)
        {
            PInstruction e = (PInstruction) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._instruction_.add(e);
        }
    }

    public TEndfunc getEndfunc()
    {
        return this._endfunc_;
    }

    public void setEndfunc(TEndfunc node)
    {
        if(this._endfunc_ != null)
        {
            this._endfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endfunc_ = node;
    }

    public PElsecondition getElsecondition()
    {
        return this._elsecondition_;
    }

    public void setElsecondition(PElsecondition node)
    {
        if(this._elsecondition_ != null)
        {
            this._elsecondition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsecondition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._lp_)
            + toString(this._expression_)
            + toString(this._rp_)
            + toString(this._alors_)
            + toString(this._startfunc_)
            + toString(this._instruction_)
            + toString(this._endfunc_)
            + toString(this._elsecondition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._lp_ == child)
        {
            this._lp_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rp_ == child)
        {
            this._rp_ = null;
            return;
        }

        if(this._alors_ == child)
        {
            this._alors_ = null;
            return;
        }

        if(this._startfunc_ == child)
        {
            this._startfunc_ = null;
            return;
        }

        if(this._instruction_.remove(child))
        {
            return;
        }

        if(this._endfunc_ == child)
        {
            this._endfunc_ = null;
            return;
        }

        if(this._elsecondition_ == child)
        {
            this._elsecondition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._lp_ == oldChild)
        {
            setLp((TLp) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rp_ == oldChild)
        {
            setRp((TRp) newChild);
            return;
        }

        if(this._alors_ == oldChild)
        {
            setAlors((TAlors) newChild);
            return;
        }

        if(this._startfunc_ == oldChild)
        {
            setStartfunc((TStartfunc) newChild);
            return;
        }

        for(ListIterator<PInstruction> i = this._instruction_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInstruction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endfunc_ == oldChild)
        {
            setEndfunc((TEndfunc) newChild);
            return;
        }

        if(this._elsecondition_ == oldChild)
        {
            setElsecondition((PElsecondition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
