/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AOptwoDeclare extends PDeclare
{
    private PType _type_;
    private TIdentif _first_;
    private TEqual _equal_;
    private TIdentif _second_;
    private POp _op_;
    private TIdentif _third_;

    public AOptwoDeclare()
    {
        // Constructor
    }

    public AOptwoDeclare(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TIdentif _first_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") TIdentif _second_,
        @SuppressWarnings("hiding") POp _op_,
        @SuppressWarnings("hiding") TIdentif _third_)
    {
        // Constructor
        setType(_type_);

        setFirst(_first_);

        setEqual(_equal_);

        setSecond(_second_);

        setOp(_op_);

        setThird(_third_);

    }

    @Override
    public Object clone()
    {
        return new AOptwoDeclare(
            cloneNode(this._type_),
            cloneNode(this._first_),
            cloneNode(this._equal_),
            cloneNode(this._second_),
            cloneNode(this._op_),
            cloneNode(this._third_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOptwoDeclare(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TIdentif getFirst()
    {
        return this._first_;
    }

    public void setFirst(TIdentif node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public TIdentif getSecond()
    {
        return this._second_;
    }

    public void setSecond(TIdentif node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public POp getOp()
    {
        return this._op_;
    }

    public void setOp(POp node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    public TIdentif getThird()
    {
        return this._third_;
    }

    public void setThird(TIdentif node)
    {
        if(this._third_ != null)
        {
            this._third_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._third_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._first_)
            + toString(this._equal_)
            + toString(this._second_)
            + toString(this._op_)
            + toString(this._third_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        if(this._third_ == child)
        {
            this._third_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((TIdentif) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((TIdentif) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((POp) newChild);
            return;
        }

        if(this._third_ == oldChild)
        {
            setThird((TIdentif) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
