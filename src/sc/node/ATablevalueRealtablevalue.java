/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ATablevalueRealtablevalue extends PRealtablevalue
{
    private TIdentif _identif_;
    private PTablevalues _tablevalues_;

    public ATablevalueRealtablevalue()
    {
        // Constructor
    }

    public ATablevalueRealtablevalue(
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") PTablevalues _tablevalues_)
    {
        // Constructor
        setIdentif(_identif_);

        setTablevalues(_tablevalues_);

    }

    @Override
    public Object clone()
    {
        return new ATablevalueRealtablevalue(
            cloneNode(this._identif_),
            cloneNode(this._tablevalues_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATablevalueRealtablevalue(this);
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public PTablevalues getTablevalues()
    {
        return this._tablevalues_;
    }

    public void setTablevalues(PTablevalues node)
    {
        if(this._tablevalues_ != null)
        {
            this._tablevalues_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tablevalues_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identif_)
            + toString(this._tablevalues_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._tablevalues_ == child)
        {
            this._tablevalues_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._tablevalues_ == oldChild)
        {
            setTablevalues((PTablevalues) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
