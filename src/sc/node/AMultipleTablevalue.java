/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleTablevalue extends PTablevalue
{
    private PRealtablevalue _realtablevalue_;
    private POp _op_;
    private PTablevalue _tablevalue_;

    public AMultipleTablevalue()
    {
        // Constructor
    }

    public AMultipleTablevalue(
        @SuppressWarnings("hiding") PRealtablevalue _realtablevalue_,
        @SuppressWarnings("hiding") POp _op_,
        @SuppressWarnings("hiding") PTablevalue _tablevalue_)
    {
        // Constructor
        setRealtablevalue(_realtablevalue_);

        setOp(_op_);

        setTablevalue(_tablevalue_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleTablevalue(
            cloneNode(this._realtablevalue_),
            cloneNode(this._op_),
            cloneNode(this._tablevalue_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleTablevalue(this);
    }

    public PRealtablevalue getRealtablevalue()
    {
        return this._realtablevalue_;
    }

    public void setRealtablevalue(PRealtablevalue node)
    {
        if(this._realtablevalue_ != null)
        {
            this._realtablevalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._realtablevalue_ = node;
    }

    public POp getOp()
    {
        return this._op_;
    }

    public void setOp(POp node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    public PTablevalue getTablevalue()
    {
        return this._tablevalue_;
    }

    public void setTablevalue(PTablevalue node)
    {
        if(this._tablevalue_ != null)
        {
            this._tablevalue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tablevalue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._realtablevalue_)
            + toString(this._op_)
            + toString(this._tablevalue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._realtablevalue_ == child)
        {
            this._realtablevalue_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        if(this._tablevalue_ == child)
        {
            this._tablevalue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._realtablevalue_ == oldChild)
        {
            setRealtablevalue((PRealtablevalue) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((POp) newChild);
            return;
        }

        if(this._tablevalue_ == oldChild)
        {
            setTablevalue((PTablevalue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
