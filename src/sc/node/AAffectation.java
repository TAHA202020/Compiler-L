/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AAffectation extends PAffectation
{
    private PVarname _varname_;
    private TEgale _egale_;
    private PExpression _expression_;
    private TPv _pv_;

    public AAffectation()
    {
        // Constructor
    }

    public AAffectation(
        @SuppressWarnings("hiding") PVarname _varname_,
        @SuppressWarnings("hiding") TEgale _egale_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TPv _pv_)
    {
        // Constructor
        setVarname(_varname_);

        setEgale(_egale_);

        setExpression(_expression_);

        setPv(_pv_);

    }

    @Override
    public Object clone()
    {
        return new AAffectation(
            cloneNode(this._varname_),
            cloneNode(this._egale_),
            cloneNode(this._expression_),
            cloneNode(this._pv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAffectation(this);
    }

    public PVarname getVarname()
    {
        return this._varname_;
    }

    public void setVarname(PVarname node)
    {
        if(this._varname_ != null)
        {
            this._varname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varname_ = node;
    }

    public TEgale getEgale()
    {
        return this._egale_;
    }

    public void setEgale(TEgale node)
    {
        if(this._egale_ != null)
        {
            this._egale_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._egale_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TPv getPv()
    {
        return this._pv_;
    }

    public void setPv(TPv node)
    {
        if(this._pv_ != null)
        {
            this._pv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varname_)
            + toString(this._egale_)
            + toString(this._expression_)
            + toString(this._pv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varname_ == child)
        {
            this._varname_ = null;
            return;
        }

        if(this._egale_ == child)
        {
            this._egale_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._pv_ == child)
        {
            this._pv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varname_ == oldChild)
        {
            setVarname((PVarname) newChild);
            return;
        }

        if(this._egale_ == oldChild)
        {
            setEgale((TEgale) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._pv_ == oldChild)
        {
            setPv((TPv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
