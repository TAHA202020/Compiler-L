/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AMultiparamNparam extends PNparam
{
    private PNparameters _nparameters_;
    private TVirgul _virgul_;
    private PNparam _nparam_;

    public AMultiparamNparam()
    {
        // Constructor
    }

    public AMultiparamNparam(
        @SuppressWarnings("hiding") PNparameters _nparameters_,
        @SuppressWarnings("hiding") TVirgul _virgul_,
        @SuppressWarnings("hiding") PNparam _nparam_)
    {
        // Constructor
        setNparameters(_nparameters_);

        setVirgul(_virgul_);

        setNparam(_nparam_);

    }

    @Override
    public Object clone()
    {
        return new AMultiparamNparam(
            cloneNode(this._nparameters_),
            cloneNode(this._virgul_),
            cloneNode(this._nparam_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiparamNparam(this);
    }

    public PNparameters getNparameters()
    {
        return this._nparameters_;
    }

    public void setNparameters(PNparameters node)
    {
        if(this._nparameters_ != null)
        {
            this._nparameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nparameters_ = node;
    }

    public TVirgul getVirgul()
    {
        return this._virgul_;
    }

    public void setVirgul(TVirgul node)
    {
        if(this._virgul_ != null)
        {
            this._virgul_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._virgul_ = node;
    }

    public PNparam getNparam()
    {
        return this._nparam_;
    }

    public void setNparam(PNparam node)
    {
        if(this._nparam_ != null)
        {
            this._nparam_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nparam_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nparameters_)
            + toString(this._virgul_)
            + toString(this._nparam_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nparameters_ == child)
        {
            this._nparameters_ = null;
            return;
        }

        if(this._virgul_ == child)
        {
            this._virgul_ = null;
            return;
        }

        if(this._nparam_ == child)
        {
            this._nparam_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nparameters_ == oldChild)
        {
            setNparameters((PNparameters) newChild);
            return;
        }

        if(this._virgul_ == oldChild)
        {
            setVirgul((TVirgul) newChild);
            return;
        }

        if(this._nparam_ == oldChild)
        {
            setNparam((PNparam) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
