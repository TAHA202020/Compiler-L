/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import java.util.*;
import sc.analysis.*;

@SuppressWarnings("nls")
public final class AFunction extends PFunction
{
    private PType _type_;
    private TIdentif _identif_;
    private TLp _firstlp_;
    private PParameters _funcparams_;
    private TRp _firstrp_;
    private PParameters _declaration_;
    private TStartfunc _startfunc_;
    private final LinkedList<PInstruction> _instruction_ = new LinkedList<PInstruction>();
    private TReturn _return_;
    private TLp _secondlp_;
    private PValue _value_;
    private TRp _secondrp_;
    private TPv _pv_;
    private TEndfunc _endfunc_;

    public AFunction()
    {
        // Constructor
    }

    public AFunction(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TLp _firstlp_,
        @SuppressWarnings("hiding") PParameters _funcparams_,
        @SuppressWarnings("hiding") TRp _firstrp_,
        @SuppressWarnings("hiding") PParameters _declaration_,
        @SuppressWarnings("hiding") TStartfunc _startfunc_,
        @SuppressWarnings("hiding") List<?> _instruction_,
        @SuppressWarnings("hiding") TReturn _return_,
        @SuppressWarnings("hiding") TLp _secondlp_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TRp _secondrp_,
        @SuppressWarnings("hiding") TPv _pv_,
        @SuppressWarnings("hiding") TEndfunc _endfunc_)
    {
        // Constructor
        setType(_type_);

        setIdentif(_identif_);

        setFirstlp(_firstlp_);

        setFuncparams(_funcparams_);

        setFirstrp(_firstrp_);

        setDeclaration(_declaration_);

        setStartfunc(_startfunc_);

        setInstruction(_instruction_);

        setReturn(_return_);

        setSecondlp(_secondlp_);

        setValue(_value_);

        setSecondrp(_secondrp_);

        setPv(_pv_);

        setEndfunc(_endfunc_);

    }

    @Override
    public Object clone()
    {
        return new AFunction(
            cloneNode(this._type_),
            cloneNode(this._identif_),
            cloneNode(this._firstlp_),
            cloneNode(this._funcparams_),
            cloneNode(this._firstrp_),
            cloneNode(this._declaration_),
            cloneNode(this._startfunc_),
            cloneList(this._instruction_),
            cloneNode(this._return_),
            cloneNode(this._secondlp_),
            cloneNode(this._value_),
            cloneNode(this._secondrp_),
            cloneNode(this._pv_),
            cloneNode(this._endfunc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunction(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TLp getFirstlp()
    {
        return this._firstlp_;
    }

    public void setFirstlp(TLp node)
    {
        if(this._firstlp_ != null)
        {
            this._firstlp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstlp_ = node;
    }

    public PParameters getFuncparams()
    {
        return this._funcparams_;
    }

    public void setFuncparams(PParameters node)
    {
        if(this._funcparams_ != null)
        {
            this._funcparams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcparams_ = node;
    }

    public TRp getFirstrp()
    {
        return this._firstrp_;
    }

    public void setFirstrp(TRp node)
    {
        if(this._firstrp_ != null)
        {
            this._firstrp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstrp_ = node;
    }

    public PParameters getDeclaration()
    {
        return this._declaration_;
    }

    public void setDeclaration(PParameters node)
    {
        if(this._declaration_ != null)
        {
            this._declaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declaration_ = node;
    }

    public TStartfunc getStartfunc()
    {
        return this._startfunc_;
    }

    public void setStartfunc(TStartfunc node)
    {
        if(this._startfunc_ != null)
        {
            this._startfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startfunc_ = node;
    }

    public LinkedList<PInstruction> getInstruction()
    {
        return this._instruction_;
    }

    public void setInstruction(List<?> list)
    {
        for(PInstruction e : this._instruction_)
        {
            e.parent(null);
        }
        this._instruction_.clear();

        for(Object obj_e : list)
        {
            PInstruction e = (PInstruction) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._instruction_.add(e);
        }
    }

    public TReturn getReturn()
    {
        return this._return_;
    }

    public void setReturn(TReturn node)
    {
        if(this._return_ != null)
        {
            this._return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._return_ = node;
    }

    public TLp getSecondlp()
    {
        return this._secondlp_;
    }

    public void setSecondlp(TLp node)
    {
        if(this._secondlp_ != null)
        {
            this._secondlp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondlp_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TRp getSecondrp()
    {
        return this._secondrp_;
    }

    public void setSecondrp(TRp node)
    {
        if(this._secondrp_ != null)
        {
            this._secondrp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondrp_ = node;
    }

    public TPv getPv()
    {
        return this._pv_;
    }

    public void setPv(TPv node)
    {
        if(this._pv_ != null)
        {
            this._pv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pv_ = node;
    }

    public TEndfunc getEndfunc()
    {
        return this._endfunc_;
    }

    public void setEndfunc(TEndfunc node)
    {
        if(this._endfunc_ != null)
        {
            this._endfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endfunc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._identif_)
            + toString(this._firstlp_)
            + toString(this._funcparams_)
            + toString(this._firstrp_)
            + toString(this._declaration_)
            + toString(this._startfunc_)
            + toString(this._instruction_)
            + toString(this._return_)
            + toString(this._secondlp_)
            + toString(this._value_)
            + toString(this._secondrp_)
            + toString(this._pv_)
            + toString(this._endfunc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._firstlp_ == child)
        {
            this._firstlp_ = null;
            return;
        }

        if(this._funcparams_ == child)
        {
            this._funcparams_ = null;
            return;
        }

        if(this._firstrp_ == child)
        {
            this._firstrp_ = null;
            return;
        }

        if(this._declaration_ == child)
        {
            this._declaration_ = null;
            return;
        }

        if(this._startfunc_ == child)
        {
            this._startfunc_ = null;
            return;
        }

        if(this._instruction_.remove(child))
        {
            return;
        }

        if(this._return_ == child)
        {
            this._return_ = null;
            return;
        }

        if(this._secondlp_ == child)
        {
            this._secondlp_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._secondrp_ == child)
        {
            this._secondrp_ = null;
            return;
        }

        if(this._pv_ == child)
        {
            this._pv_ = null;
            return;
        }

        if(this._endfunc_ == child)
        {
            this._endfunc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._firstlp_ == oldChild)
        {
            setFirstlp((TLp) newChild);
            return;
        }

        if(this._funcparams_ == oldChild)
        {
            setFuncparams((PParameters) newChild);
            return;
        }

        if(this._firstrp_ == oldChild)
        {
            setFirstrp((TRp) newChild);
            return;
        }

        if(this._declaration_ == oldChild)
        {
            setDeclaration((PParameters) newChild);
            return;
        }

        if(this._startfunc_ == oldChild)
        {
            setStartfunc((TStartfunc) newChild);
            return;
        }

        for(ListIterator<PInstruction> i = this._instruction_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInstruction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(this._secondlp_ == oldChild)
        {
            setSecondlp((TLp) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._secondrp_ == oldChild)
        {
            setSecondrp((TRp) newChild);
            return;
        }

        if(this._pv_ == oldChild)
        {
            setPv((TPv) newChild);
            return;
        }

        if(this._endfunc_ == oldChild)
        {
            setEndfunc((TEndfunc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
