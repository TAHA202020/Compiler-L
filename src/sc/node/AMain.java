/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AMain extends PMain
{
    private TMainfc _mainfc_;
    private PListedecvar _listedecvar_;
    private PBloc _bloc_;

    public AMain()
    {
        // Constructor
    }

    public AMain(
        @SuppressWarnings("hiding") TMainfc _mainfc_,
        @SuppressWarnings("hiding") PListedecvar _listedecvar_,
        @SuppressWarnings("hiding") PBloc _bloc_)
    {
        // Constructor
        setMainfc(_mainfc_);

        setListedecvar(_listedecvar_);

        setBloc(_bloc_);

    }

    @Override
    public Object clone()
    {
        return new AMain(
            cloneNode(this._mainfc_),
            cloneNode(this._listedecvar_),
            cloneNode(this._bloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMain(this);
    }

    public TMainfc getMainfc()
    {
        return this._mainfc_;
    }

    public void setMainfc(TMainfc node)
    {
        if(this._mainfc_ != null)
        {
            this._mainfc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainfc_ = node;
    }

    public PListedecvar getListedecvar()
    {
        return this._listedecvar_;
    }

    public void setListedecvar(PListedecvar node)
    {
        if(this._listedecvar_ != null)
        {
            this._listedecvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listedecvar_ = node;
    }

    public PBloc getBloc()
    {
        return this._bloc_;
    }

    public void setBloc(PBloc node)
    {
        if(this._bloc_ != null)
        {
            this._bloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mainfc_)
            + toString(this._listedecvar_)
            + toString(this._bloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mainfc_ == child)
        {
            this._mainfc_ = null;
            return;
        }

        if(this._listedecvar_ == child)
        {
            this._listedecvar_ = null;
            return;
        }

        if(this._bloc_ == child)
        {
            this._bloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mainfc_ == oldChild)
        {
            setMainfc((TMainfc) newChild);
            return;
        }

        if(this._listedecvar_ == oldChild)
        {
            setListedecvar((PListedecvar) newChild);
            return;
        }

        if(this._bloc_ == oldChild)
        {
            setBloc((PBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
