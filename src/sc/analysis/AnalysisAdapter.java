/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseRealvalues(AFalseRealvalues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueRealvalues(ATrueRealvalues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreRealvalues(ANombreRealvalues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultOp(AMultOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivOp(ADivOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueBooleans(ATrueBooleans node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseBooleans(AFalseBooleans node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoop(ALoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrLog(AOrLog node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndLog(AAndLog node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABiggerCmp(ABiggerCmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASmallerCmp(ASmallerCmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotequalCmp(ANotequalCmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualCmp(AEqualCmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogOperations(ALogOperations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpOperations(ACmpOperations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpOperations(AOpOperations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifSinglevalue(AIdentifSinglevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleansSinglevalue(ABooleansSinglevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreSinglevalue(ANombreSinglevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallfunctionSinglevalue(ACallfunctionSinglevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplevaluesValue(AMultiplevaluesValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinglevalueValue(ASinglevalueValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABraketsValue(ABraketsValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotvalueValue(ANotvalueValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsecondition(AElsecondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameters(AParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametervirgul(AParametervirgul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATablesize(ATablesize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifRealtablevalue(AIdentifRealtablevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreRealtablevalue(ANombreRealtablevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATablevalueRealtablevalue(ATablevalueRealtablevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleTablevalue(AMultipleTablevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTablevalue(ASingleTablevalue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATablevalues(ATablevalues node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMain(AMain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiparamNparam(AMultiparamNparam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleparamNparam(ASingleparamNparam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionInstruction(AConditionInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallfuncInstruction(ACallfuncInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadInstruction(AReadInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteInstruction(AWriteInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnstatementInstruction(AReturnstatementInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopInstruction(ALoopInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectation(AAffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnstatement(AReturnstatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgul(TVirgul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWrite(TWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLp(TLp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRp(TRp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStartfunc(TStartfunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndfunc(TEndfunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRb(TRb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLb(TLb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPv(TPv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMainfunc(TMainfunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBigger(TBigger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSmaller(TSmaller node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotequal(TNotequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
