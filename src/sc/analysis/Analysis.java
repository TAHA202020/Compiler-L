/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAFalseRealvalues(AFalseRealvalues node);
    void caseATrueRealvalues(ATrueRealvalues node);
    void caseANombreRealvalues(ANombreRealvalues node);
    void caseAOrLog(AOrLog node);
    void caseAAndLog(AAndLog node);
    void caseALogOperations(ALogOperations node);
    void caseACmpOperations(ACmpOperations node);
    void caseAIdentifSinglevalue(AIdentifSinglevalue node);
    void caseANotidentifSinglevalue(ANotidentifSinglevalue node);
    void caseABooleansSinglevalue(ABooleansSinglevalue node);
    void caseANombreSinglevalue(ANombreSinglevalue node);
    void caseACallfuncSinglevalue(ACallfuncSinglevalue node);
    void caseAMultiplevaluesValue(AMultiplevaluesValue node);
    void caseASinglevalueValue(ASinglevalueValue node);
    void caseABiggerCmp(ABiggerCmp node);
    void caseASmallerCmp(ASmallerCmp node);
    void caseANotequalCmp(ANotequalCmp node);
    void caseAEqualCmp(AEqualCmp node);
    void caseAEntierType(AEntierType node);
    void caseABooleanType(ABooleanType node);
    void caseAPlusOp(APlusOp node);
    void caseAMinusOp(AMinusOp node);
    void caseAMultOp(AMultOp node);
    void caseADivOp(ADivOp node);
    void caseATrueBooleans(ATrueBooleans node);
    void caseAFalseBooleans(AFalseBooleans node);
    void caseAIdentifNparameters(AIdentifNparameters node);
    void caseANombreNparameters(ANombreNparameters node);
    void caseABooleansNparameters(ABooleansNparameters node);
    void caseAMultiparamNparam(AMultiparamNparam node);
    void caseASingleparamNparam(ASingleparamNparam node);
    void caseAAffectation(AAffectation node);
    void caseACondition(ACondition node);
    void caseALoop(ALoop node);
    void caseAElsecondition(AElsecondition node);
    void caseAMultipleExpression(AMultipleExpression node);
    void caseASingleExpression(ASingleExpression node);
    void caseAIdentifidentifSingleexpression(AIdentifidentifSingleexpression node);
    void caseAIdentifrealvalueSingleexpression(AIdentifrealvalueSingleexpression node);
    void caseARealvalueidentifSingleexpression(ARealvalueidentifSingleexpression node);
    void caseAParameter(AParameter node);
    void caseAMultipleParameters(AMultipleParameters node);
    void caseASingleParameters(ASingleParameters node);
    void caseADefaultProgramme(ADefaultProgramme node);
    void caseAMainProgramme(AMainProgramme node);
    void caseAMain(AMain node);
    void caseAAffectationInstruction(AAffectationInstruction node);
    void caseAConditionInstruction(AConditionInstruction node);
    void caseACallfuncInstruction(ACallfuncInstruction node);
    void caseAReadInstruction(AReadInstruction node);
    void caseAWriteInstruction(AWriteInstruction node);
    void caseAFunction(AFunction node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTVirgule(TVirgule node);
    void caseTNombre(TNombre node);
    void caseTIdentif(TIdentif node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLp(TLp node);
    void caseTRp(TRp node);
    void caseTEqual(TEqual node);
    void caseTStartfunc(TStartfunc node);
    void caseTEndfunc(TEndfunc node);
    void caseTVirgul(TVirgul node);
    void caseTPv(TPv node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTReturn(TReturn node);
    void caseTEntier(TEntier node);
    void caseTBoolean(TBoolean node);
    void caseTMainfunc(TMainfunc node);
    void caseTSi(TSi node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTBigger(TBigger node);
    void caseTSmaller(TSmaller node);
    void caseTNotequal(TNotequal node);
    void caseTAlors(TAlors node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTRead(TRead node);
    void caseTWrite(TWrite node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
