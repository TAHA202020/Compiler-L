/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        if(node.getListedecfonc() != null)
        {
            node.getListedecfonc().apply(this);
        }
        outAProgramme(node);
    }

    public void inAListedecfonc(AListedecfonc node)
    {
        defaultIn(node);
    }

    public void outAListedecfonc(AListedecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListedecfonc(AListedecfonc node)
    {
        inAListedecfonc(node);
        {
            List<PFonction> copy = new ArrayList<PFonction>(node.getFonction());
            for(PFonction e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        outAListedecfonc(node);
    }

    public void inAFonction(AFonction node)
    {
        defaultIn(node);
    }

    public void outAFonction(AFonction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFonction(AFonction node)
    {
        inAFonction(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        outAFonction(node);
    }

    public void inAMain(AMain node)
    {
        defaultIn(node);
    }

    public void outAMain(AMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMain(AMain node)
    {
        inAMain(node);
        if(node.getMainfc() != null)
        {
            node.getMainfc().apply(this);
        }
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        outAMain(node);
    }

    public void inAListedecvar(AListedecvar node)
    {
        defaultIn(node);
    }

    public void outAListedecvar(AListedecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListedecvar(AListedecvar node)
    {
        inAListedecvar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PVvar> copy = new ArrayList<PVvar>(node.getVvar());
            for(PVvar e : copy)
            {
                e.apply(this);
            }
        }
        outAListedecvar(node);
    }

    public void inAArguments(AArguments node)
    {
        defaultIn(node);
    }

    public void outAArguments(AArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        inAArguments(node);
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        outAArguments(node);
    }

    public void inABloc(ABloc node)
    {
        defaultIn(node);
    }

    public void outABloc(ABloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloc(ABloc node)
    {
        inABloc(node);
        if(node.getAo() != null)
        {
            node.getAo().apply(this);
        }
        {
            List<PInstruction> copy = new ArrayList<PInstruction>(node.getInstruction());
            for(PInstruction e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAf() != null)
        {
            node.getAf().apply(this);
        }
        outABloc(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        if(node.getAffectation() != null)
        {
            node.getAffectation().apply(this);
        }
        outAAffectationInstruction(node);
    }

    public void inASiInstruction(ASiInstruction node)
    {
        defaultIn(node);
    }

    public void outASiInstruction(ASiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiInstruction(ASiInstruction node)
    {
        inASiInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        outASiInstruction(node);
    }

    public void inATantqueInstruction(ATantqueInstruction node)
    {
        defaultIn(node);
    }

    public void outATantqueInstruction(ATantqueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueInstruction(ATantqueInstruction node)
    {
        inATantqueInstruction(node);
        if(node.getTantque() != null)
        {
            node.getTantque().apply(this);
        }
        outATantqueInstruction(node);
    }

    public void inARetourInstruction(ARetourInstruction node)
    {
        defaultIn(node);
    }

    public void outARetourInstruction(ARetourInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourInstruction(ARetourInstruction node)
    {
        inARetourInstruction(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        outARetourInstruction(node);
    }

    public void inAAppelInstruction(AAppelInstruction node)
    {
        defaultIn(node);
    }

    public void outAAppelInstruction(AAppelInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelInstruction(AAppelInstruction node)
    {
        inAAppelInstruction(node);
        if(node.getAppel() != null)
        {
            node.getAppel().apply(this);
        }
        outAAppelInstruction(node);
    }

    public void inAEcrireInstruction(AEcrireInstruction node)
    {
        defaultIn(node);
    }

    public void outAEcrireInstruction(AEcrireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        inAEcrireInstruction(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        outAEcrireInstruction(node);
    }

    public void inALireInstruction(ALireInstruction node)
    {
        defaultIn(node);
    }

    public void outALireInstruction(ALireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireInstruction(ALireInstruction node)
    {
        inALireInstruction(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        outALireInstruction(node);
    }

    public void inAFairetantqueInstruction(AFairetantqueInstruction node)
    {
        defaultIn(node);
    }

    public void outAFairetantqueInstruction(AFairetantqueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFairetantqueInstruction(AFairetantqueInstruction node)
    {
        inAFairetantqueInstruction(node);
        if(node.getFairetantque() != null)
        {
            node.getFairetantque().apply(this);
        }
        outAFairetantqueInstruction(node);
    }

    public void inAFairetantque(AFairetantque node)
    {
        defaultIn(node);
    }

    public void outAFairetantque(AFairetantque node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFairetantque(AFairetantque node)
    {
        inAFairetantque(node);
        if(node.getSFaire() != null)
        {
            node.getSFaire().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        if(node.getTantQue() != null)
        {
            node.getTantQue().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFairetantque(node);
    }

    public void inALire(ALire node)
    {
        defaultIn(node);
    }

    public void outALire(ALire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALire(ALire node)
    {
        inALire(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getEgale() != null)
        {
            node.getEgale().apply(this);
        }
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        if(node.getPv() != null)
        {
            node.getPv().apply(this);
        }
        outALire(node);
    }

    public void inAEcrire(AEcrire node)
    {
        defaultIn(node);
    }

    public void outAEcrire(AEcrire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrire(AEcrire node)
    {
        inAEcrire(node);
        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        if(node.getPv() != null)
        {
            node.getPv().apply(this);
        }
        outAEcrire(node);
    }

    public void inAAffectation(AAffectation node)
    {
        defaultIn(node);
    }

    public void outAAffectation(AAffectation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectation(AAffectation node)
    {
        inAAffectation(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getEgale() != null)
        {
            node.getEgale().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPv() != null)
        {
            node.getPv().apply(this);
        }
        outAAffectation(node);
    }

    public void inASi(ASi node)
    {
        defaultIn(node);
    }

    public void outASi(ASi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASi(ASi node)
    {
        inASi(node);
        if(node.getSSi() != null)
        {
            node.getSSi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        if(node.getSinonbloc() != null)
        {
            node.getSinonbloc().apply(this);
        }
        outASi(node);
    }

    public void inATantque(ATantque node)
    {
        defaultIn(node);
    }

    public void outATantque(ATantque node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantque(ATantque node)
    {
        inATantque(node);
        if(node.getTantQue() != null)
        {
            node.getTantQue().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        outATantque(node);
    }

    public void inARetour(ARetour node)
    {
        defaultIn(node);
    }

    public void outARetour(ARetour node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetour(ARetour node)
    {
        inARetour(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPv() != null)
        {
            node.getPv().apply(this);
        }
        outARetour(node);
    }

    public void inAAppel(AAppel node)
    {
        defaultIn(node);
    }

    public void outAAppel(AAppel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppel(AAppel node)
    {
        inAAppel(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        if(node.getExpressionvexp() != null)
        {
            node.getExpressionvexp().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        if(node.getPv() != null)
        {
            node.getPv().apply(this);
        }
        outAAppel(node);
    }

    public void inAAppelSansPv(AAppelSansPv node)
    {
        defaultIn(node);
    }

    public void outAAppelSansPv(AAppelSansPv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelSansPv(AAppelSansPv node)
    {
        inAAppelSansPv(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        if(node.getExpressionvexp() != null)
        {
            node.getExpressionvexp().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        outAAppelSansPv(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getExpou() != null)
        {
            node.getExpou().apply(this);
        }
        outAExpression(node);
    }

    public void inAMultiExpou(AMultiExpou node)
    {
        defaultIn(node);
    }

    public void outAMultiExpou(AMultiExpou node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpou(AMultiExpou node)
    {
        inAMultiExpou(node);
        if(node.getExpou() != null)
        {
            node.getExpou().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpet() != null)
        {
            node.getExpet().apply(this);
        }
        outAMultiExpou(node);
    }

    public void inASingleExpou(ASingleExpou node)
    {
        defaultIn(node);
    }

    public void outASingleExpou(ASingleExpou node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpou(ASingleExpou node)
    {
        inASingleExpou(node);
        if(node.getExpet() != null)
        {
            node.getExpet().apply(this);
        }
        outASingleExpou(node);
    }

    public void inAMultiExpet(AMultiExpet node)
    {
        defaultIn(node);
    }

    public void outAMultiExpet(AMultiExpet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpet(AMultiExpet node)
    {
        inAMultiExpet(node);
        if(node.getExpet() != null)
        {
            node.getExpet().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpnon() != null)
        {
            node.getExpnon().apply(this);
        }
        outAMultiExpet(node);
    }

    public void inASingleExpet(ASingleExpet node)
    {
        defaultIn(node);
    }

    public void outASingleExpet(ASingleExpet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpet(ASingleExpet node)
    {
        inASingleExpet(node);
        if(node.getExpnon() != null)
        {
            node.getExpnon().apply(this);
        }
        outASingleExpet(node);
    }

    public void inAMultiExpnon(AMultiExpnon node)
    {
        defaultIn(node);
    }

    public void outAMultiExpnon(AMultiExpnon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpnon(AMultiExpnon node)
    {
        inAMultiExpnon(node);
        {
            List<TNot> copy = new ArrayList<TNot>(node.getNot());
            for(TNot e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpComparaisonInf() != null)
        {
            node.getExpComparaisonInf().apply(this);
        }
        outAMultiExpnon(node);
    }

    public void inASingleExpnon(ASingleExpnon node)
    {
        defaultIn(node);
    }

    public void outASingleExpnon(ASingleExpnon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpnon(ASingleExpnon node)
    {
        inASingleExpnon(node);
        if(node.getExpComparaisonInf() != null)
        {
            node.getExpComparaisonInf().apply(this);
        }
        outASingleExpnon(node);
    }

    public void inAMultiExpComparaisonInf(AMultiExpComparaisonInf node)
    {
        defaultIn(node);
    }

    public void outAMultiExpComparaisonInf(AMultiExpComparaisonInf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpComparaisonInf(AMultiExpComparaisonInf node)
    {
        inAMultiExpComparaisonInf(node);
        if(node.getExpComparaisonInf() != null)
        {
            node.getExpComparaisonInf().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExpComparaisonEgale() != null)
        {
            node.getExpComparaisonEgale().apply(this);
        }
        outAMultiExpComparaisonInf(node);
    }

    public void inASingleExpComparaisonInf(ASingleExpComparaisonInf node)
    {
        defaultIn(node);
    }

    public void outASingleExpComparaisonInf(ASingleExpComparaisonInf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpComparaisonInf(ASingleExpComparaisonInf node)
    {
        inASingleExpComparaisonInf(node);
        if(node.getExpComparaisonEgale() != null)
        {
            node.getExpComparaisonEgale().apply(this);
        }
        outASingleExpComparaisonInf(node);
    }

    public void inAMultiExpComparaisonEgale(AMultiExpComparaisonEgale node)
    {
        defaultIn(node);
    }

    public void outAMultiExpComparaisonEgale(AMultiExpComparaisonEgale node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpComparaisonEgale(AMultiExpComparaisonEgale node)
    {
        inAMultiExpComparaisonEgale(node);
        if(node.getExpComparaisonEgale() != null)
        {
            node.getExpComparaisonEgale().apply(this);
        }
        if(node.getEgale() != null)
        {
            node.getEgale().apply(this);
        }
        if(node.getExpAddition() != null)
        {
            node.getExpAddition().apply(this);
        }
        outAMultiExpComparaisonEgale(node);
    }

    public void inASingleExpComparaisonEgale(ASingleExpComparaisonEgale node)
    {
        defaultIn(node);
    }

    public void outASingleExpComparaisonEgale(ASingleExpComparaisonEgale node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpComparaisonEgale(ASingleExpComparaisonEgale node)
    {
        inASingleExpComparaisonEgale(node);
        if(node.getExpAddition() != null)
        {
            node.getExpAddition().apply(this);
        }
        outASingleExpComparaisonEgale(node);
    }

    public void inAMultiExpAddition(AMultiExpAddition node)
    {
        defaultIn(node);
    }

    public void outAMultiExpAddition(AMultiExpAddition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpAddition(AMultiExpAddition node)
    {
        inAMultiExpAddition(node);
        if(node.getExpAddition() != null)
        {
            node.getExpAddition().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpSub() != null)
        {
            node.getExpSub().apply(this);
        }
        outAMultiExpAddition(node);
    }

    public void inASingleExpAddition(ASingleExpAddition node)
    {
        defaultIn(node);
    }

    public void outASingleExpAddition(ASingleExpAddition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpAddition(ASingleExpAddition node)
    {
        inASingleExpAddition(node);
        if(node.getExpSub() != null)
        {
            node.getExpSub().apply(this);
        }
        outASingleExpAddition(node);
    }

    public void inAMultiExpSub(AMultiExpSub node)
    {
        defaultIn(node);
    }

    public void outAMultiExpSub(AMultiExpSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpSub(AMultiExpSub node)
    {
        inAMultiExpSub(node);
        if(node.getExpSub() != null)
        {
            node.getExpSub().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpMultiplication() != null)
        {
            node.getExpMultiplication().apply(this);
        }
        outAMultiExpSub(node);
    }

    public void inASingleExpSub(ASingleExpSub node)
    {
        defaultIn(node);
    }

    public void outASingleExpSub(ASingleExpSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpSub(ASingleExpSub node)
    {
        inASingleExpSub(node);
        if(node.getExpMultiplication() != null)
        {
            node.getExpMultiplication().apply(this);
        }
        outASingleExpSub(node);
    }

    public void inAMultiExpMultiplication(AMultiExpMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiExpMultiplication(AMultiExpMultiplication node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpMultiplication(AMultiExpMultiplication node)
    {
        inAMultiExpMultiplication(node);
        if(node.getExpMultiplication() != null)
        {
            node.getExpMultiplication().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpDiv() != null)
        {
            node.getExpDiv().apply(this);
        }
        outAMultiExpMultiplication(node);
    }

    public void inASingleExpMultiplication(ASingleExpMultiplication node)
    {
        defaultIn(node);
    }

    public void outASingleExpMultiplication(ASingleExpMultiplication node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpMultiplication(ASingleExpMultiplication node)
    {
        inASingleExpMultiplication(node);
        if(node.getExpDiv() != null)
        {
            node.getExpDiv().apply(this);
        }
        outASingleExpMultiplication(node);
    }

    public void inAMultiExpDiv(AMultiExpDiv node)
    {
        defaultIn(node);
    }

    public void outAMultiExpDiv(AMultiExpDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpDiv(AMultiExpDiv node)
    {
        inAMultiExpDiv(node);
        if(node.getExpDiv() != null)
        {
            node.getExpDiv().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpressionPrimaire() != null)
        {
            node.getExpressionPrimaire().apply(this);
        }
        outAMultiExpDiv(node);
    }

    public void inASingleExpDiv(ASingleExpDiv node)
    {
        defaultIn(node);
    }

    public void outASingleExpDiv(ASingleExpDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpDiv(ASingleExpDiv node)
    {
        inASingleExpDiv(node);
        if(node.getExpCarre() != null)
        {
            node.getExpCarre().apply(this);
        }
        outASingleExpDiv(node);
    }

    public void inAMultiExpCarre(AMultiExpCarre node)
    {
        defaultIn(node);
    }

    public void outAMultiExpCarre(AMultiExpCarre node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExpCarre(AMultiExpCarre node)
    {
        inAMultiExpCarre(node);
        if(node.getExpCarre() != null)
        {
            node.getExpCarre().apply(this);
        }
        if(node.getCarre() != null)
        {
            node.getCarre().apply(this);
        }
        outAMultiExpCarre(node);
    }

    public void inASingleExpCarre(ASingleExpCarre node)
    {
        defaultIn(node);
    }

    public void outASingleExpCarre(ASingleExpCarre node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpCarre(ASingleExpCarre node)
    {
        inASingleExpCarre(node);
        if(node.getExpressionPrimaire() != null)
        {
            node.getExpressionPrimaire().apply(this);
        }
        outASingleExpCarre(node);
    }

    public void inANombreExpressionPrimaire(ANombreExpressionPrimaire node)
    {
        defaultIn(node);
    }

    public void outANombreExpressionPrimaire(ANombreExpressionPrimaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExpressionPrimaire(ANombreExpressionPrimaire node)
    {
        inANombreExpressionPrimaire(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExpressionPrimaire(node);
    }

    public void inAPExpressionExpressionPrimaire(APExpressionExpressionPrimaire node)
    {
        defaultIn(node);
    }

    public void outAPExpressionExpressionPrimaire(APExpressionExpressionPrimaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPExpressionExpressionPrimaire(APExpressionExpressionPrimaire node)
    {
        inAPExpressionExpressionPrimaire(node);
        if(node.getRp() != null)
        {
            node.getRp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLp() != null)
        {
            node.getLp().apply(this);
        }
        outAPExpressionExpressionPrimaire(node);
    }

    public void inAValBoolExpressionPrimaire(AValBoolExpressionPrimaire node)
    {
        defaultIn(node);
    }

    public void outAValBoolExpressionPrimaire(AValBoolExpressionPrimaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValBoolExpressionPrimaire(AValBoolExpressionPrimaire node)
    {
        inAValBoolExpressionPrimaire(node);
        if(node.getValeurbool() != null)
        {
            node.getValeurbool().apply(this);
        }
        outAValBoolExpressionPrimaire(node);
    }

    public void inAAppelExpressionPrimaire(AAppelExpressionPrimaire node)
    {
        defaultIn(node);
    }

    public void outAAppelExpressionPrimaire(AAppelExpressionPrimaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelExpressionPrimaire(AAppelExpressionPrimaire node)
    {
        inAAppelExpressionPrimaire(node);
        if(node.getAppelSansPv() != null)
        {
            node.getAppelSansPv().apply(this);
        }
        outAAppelExpressionPrimaire(node);
    }

    public void inAVarExpressionPrimaire(AVarExpressionPrimaire node)
    {
        defaultIn(node);
    }

    public void outAVarExpressionPrimaire(AVarExpressionPrimaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpressionPrimaire(AVarExpressionPrimaire node)
    {
        inAVarExpressionPrimaire(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        outAVarExpressionPrimaire(node);
    }

    public void inAVraiValeurbool(AVraiValeurbool node)
    {
        defaultIn(node);
    }

    public void outAVraiValeurbool(AVraiValeurbool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiValeurbool(AVraiValeurbool node)
    {
        inAVraiValeurbool(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiValeurbool(node);
    }

    public void inAFauxValeurbool(AFauxValeurbool node)
    {
        defaultIn(node);
    }

    public void outAFauxValeurbool(AFauxValeurbool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxValeurbool(AFauxValeurbool node)
    {
        inAFauxValeurbool(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxValeurbool(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAVvar(AVvar node)
    {
        defaultIn(node);
    }

    public void outAVvar(AVvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVvar(AVvar node)
    {
        inAVvar(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVvar(node);
    }

    public void inAVarSimpleVar(AVarSimpleVar node)
    {
        defaultIn(node);
    }

    public void outAVarSimpleVar(AVarSimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSimpleVar(AVarSimpleVar node)
    {
        inAVarSimpleVar(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAVarSimpleVar(node);
    }

    public void inATableauVar(ATableauVar node)
    {
        defaultIn(node);
    }

    public void outATableauVar(ATableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauVar(ATableauVar node)
    {
        inATableauVar(node);
        if(node.getTypetab() != null)
        {
            node.getTypetab().apply(this);
        }
        outATableauVar(node);
    }

    public void inAVarSimpleVarname(AVarSimpleVarname node)
    {
        defaultIn(node);
    }

    public void outAVarSimpleVarname(AVarSimpleVarname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSimpleVarname(AVarSimpleVarname node)
    {
        inAVarSimpleVarname(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAVarSimpleVarname(node);
    }

    public void inAVarTabVarname(AVarTabVarname node)
    {
        defaultIn(node);
    }

    public void outAVarTabVarname(AVarTabVarname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTabVarname(AVarTabVarname node)
    {
        inAVarTabVarname(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outAVarTabVarname(node);
    }

    public void inATypetab(ATypetab node)
    {
        defaultIn(node);
    }

    public void outATypetab(ATypetab node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypetab(ATypetab node)
    {
        inATypetab(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getTabval() != null)
        {
            node.getTabval().apply(this);
        }
        outATypetab(node);
    }

    public void inATabval(ATabval node)
    {
        defaultIn(node);
    }

    public void outATabval(ATabval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabval(ATabval node)
    {
        inATabval(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outATabval(node);
    }

    public void inASinonbloc(ASinonbloc node)
    {
        defaultIn(node);
    }

    public void outASinonbloc(ASinonbloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonbloc(ASinonbloc node)
    {
        inASinonbloc(node);
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getBloc() != null)
        {
            node.getBloc().apply(this);
        }
        outASinonbloc(node);
    }

    public void inAVexpression(AVexpression node)
    {
        defaultIn(node);
    }

    public void outAVexpression(AVexpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVexpression(AVexpression node)
    {
        inAVexpression(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAVexpression(node);
    }

    public void inAExpressionvexp(AExpressionvexp node)
    {
        defaultIn(node);
    }

    public void outAExpressionvexp(AExpressionvexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionvexp(AExpressionvexp node)
    {
        inAExpressionvexp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PVexpression> copy = new ArrayList<PVexpression>(node.getVexpression());
            for(PVexpression e : copy)
            {
                e.apply(this);
            }
        }
        outAExpressionvexp(node);
    }
}
