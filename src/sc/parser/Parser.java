/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramme1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogramme2Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprogramme3Programme */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprogramme4Programme */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AFalseRealvalues */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ATrueRealvalues */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ANombreRealvalues */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AEntierType */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce APlusOp */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AMinusOp */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AMultOp */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce ADivOp */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce ATrueBooleans */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AFalseBooleans */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce AAloop1Loop */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce AAloop2Loop */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AOrLog */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAndLog */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce ABiggerCmp */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ASmallerCmp */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ANotequalCmp */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AEqualCmp */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce ALogOperations */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce ACmpOperations */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AOpOperations */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AAidentifsinglevalue1Singlevalue */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AAidentifsinglevalue2Singlevalue */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce ABooleansSinglevalue */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce ANombreSinglevalue */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AAcallfunctionsinglevalue1Singlevalue */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce AAcallfunctionsinglevalue2Singlevalue */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list, false);
            }
            break;
            case 32: /* reduce AMultiplevaluesValue */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce ASinglevalueValue */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list, false);
            }
            break;
            case 34: /* reduce ABraketsValue */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list, false);
            }
            break;
            case 35: /* reduce ANotvalueValue */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list, false);
            }
            break;
            case 36: /* reduce AAcondition1Condition */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list, false);
            }
            break;
            case 37: /* reduce AAcondition2Condition */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list, false);
            }
            break;
            case 38: /* reduce AAcondition3Condition */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list, false);
            }
            break;
            case 39: /* reduce AAcondition4Condition */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list, false);
            }
            break;
            case 40: /* reduce AAelsecondition1Elsecondition */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list, false);
            }
            break;
            case 41: /* reduce AAelsecondition2Elsecondition */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AAparameters1Parameters */
            {
                ArrayList<Object> list = new42();
                push(goTo(13), list, false);
            }
            break;
            case 43: /* reduce AAparameters2Parameters */
            {
                ArrayList<Object> list = new43();
                push(goTo(13), list, false);
            }
            break;
            case 44: /* reduce AParametervirgul */
            {
                ArrayList<Object> list = new44();
                push(goTo(14), list, false);
            }
            break;
            case 45: /* reduce AAparameter1Parameter */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list, false);
            }
            break;
            case 46: /* reduce AAparameter2Parameter */
            {
                ArrayList<Object> list = new46();
                push(goTo(15), list, false);
            }
            break;
            case 47: /* reduce ATablesize */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, false);
            }
            break;
            case 48: /* reduce AIdentifRealtablevalue */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce ANombreRealtablevalue */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list, false);
            }
            break;
            case 50: /* reduce ATablevalueRealtablevalue */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list, false);
            }
            break;
            case 51: /* reduce AMultipleTablevalue */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list, false);
            }
            break;
            case 52: /* reduce ASingleTablevalue */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list, false);
            }
            break;
            case 53: /* reduce ATablevalues */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce AAfunction1Function */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AAfunction2Function */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce AAfunction3Function */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, false);
            }
            break;
            case 57: /* reduce AAfunction4Function */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list, false);
            }
            break;
            case 58: /* reduce AAfunction5Function */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list, false);
            }
            break;
            case 59: /* reduce AAfunction6Function */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list, false);
            }
            break;
            case 60: /* reduce AAfunction7Function */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list, false);
            }
            break;
            case 61: /* reduce AAfunction8Function */
            {
                ArrayList<Object> list = new61();
                push(goTo(20), list, false);
            }
            break;
            case 62: /* reduce AAfunction9Function */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list, false);
            }
            break;
            case 63: /* reduce AAfunction10Function */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list, false);
            }
            break;
            case 64: /* reduce AAfunction11Function */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list, false);
            }
            break;
            case 65: /* reduce AAfunction12Function */
            {
                ArrayList<Object> list = new65();
                push(goTo(20), list, false);
            }
            break;
            case 66: /* reduce AAfunction13Function */
            {
                ArrayList<Object> list = new66();
                push(goTo(20), list, false);
            }
            break;
            case 67: /* reduce AAfunction14Function */
            {
                ArrayList<Object> list = new67();
                push(goTo(20), list, false);
            }
            break;
            case 68: /* reduce AAfunction15Function */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list, false);
            }
            break;
            case 69: /* reduce AAfunction16Function */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list, false);
            }
            break;
            case 70: /* reduce AAmain1Main */
            {
                ArrayList<Object> list = new70();
                push(goTo(21), list, false);
            }
            break;
            case 71: /* reduce AAmain2Main */
            {
                ArrayList<Object> list = new71();
                push(goTo(21), list, false);
            }
            break;
            case 72: /* reduce AAmain3Main */
            {
                ArrayList<Object> list = new72();
                push(goTo(21), list, false);
            }
            break;
            case 73: /* reduce AAmain4Main */
            {
                ArrayList<Object> list = new73();
                push(goTo(21), list, false);
            }
            break;
            case 74: /* reduce AMultiparamNparam */
            {
                ArrayList<Object> list = new74();
                push(goTo(22), list, false);
            }
            break;
            case 75: /* reduce ASingleparamNparam */
            {
                ArrayList<Object> list = new75();
                push(goTo(22), list, false);
            }
            break;
            case 76: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new76();
                push(goTo(23), list, false);
            }
            break;
            case 77: /* reduce AConditionInstruction */
            {
                ArrayList<Object> list = new77();
                push(goTo(23), list, false);
            }
            break;
            case 78: /* reduce AAcallfuncinstruction1Instruction */
            {
                ArrayList<Object> list = new78();
                push(goTo(23), list, false);
            }
            break;
            case 79: /* reduce AAcallfuncinstruction2Instruction */
            {
                ArrayList<Object> list = new79();
                push(goTo(23), list, false);
            }
            break;
            case 80: /* reduce AAreadinstruction1Instruction */
            {
                ArrayList<Object> list = new80();
                push(goTo(23), list, false);
            }
            break;
            case 81: /* reduce AAreadinstruction2Instruction */
            {
                ArrayList<Object> list = new81();
                push(goTo(23), list, false);
            }
            break;
            case 82: /* reduce AWriteInstruction */
            {
                ArrayList<Object> list = new82();
                push(goTo(23), list, false);
            }
            break;
            case 83: /* reduce AReturnstatementInstruction */
            {
                ArrayList<Object> list = new83();
                push(goTo(23), list, false);
            }
            break;
            case 84: /* reduce ALoopInstruction */
            {
                ArrayList<Object> list = new84();
                push(goTo(23), list, false);
            }
            break;
            case 85: /* reduce AAaffectation1Affectation */
            {
                ArrayList<Object> list = new85();
                push(goTo(24), list, false);
            }
            break;
            case 86: /* reduce AAaffectation2Affectation */
            {
                ArrayList<Object> list = new86();
                push(goTo(24), list, false);
            }
            break;
            case 87: /* reduce AReturnstatement */
            {
                ArrayList<Object> list = new87();
                push(goTo(25), list, false);
            }
            break;
            case 88: /* reduce ATerminal$Function */
            {
                ArrayList<Object> list = new88();
                push(goTo(26), list, true);
            }
            break;
            case 89: /* reduce ANonTerminal$Function */
            {
                ArrayList<Object> list = new89();
                push(goTo(26), list, true);
            }
            break;
            case 90: /* reduce ATerminal$Instruction */
            {
                ArrayList<Object> list = new90();
                push(goTo(27), list, true);
            }
            break;
            case 91: /* reduce ANonTerminal$Instruction */
            {
                ArrayList<Object> list = new91();
                push(goTo(27), list, true);
            }
            break;
            case 92: /* reduce ATerminal$Parametervirgul */
            {
                ArrayList<Object> list = new92();
                push(goTo(28), list, true);
            }
            break;
            case 93: /* reduce ANonTerminal$Parametervirgul */
            {
                ArrayList<Object> list = new93();
                push(goTo(28), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramme1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PMain pmainNode4;
        {
            // Block
        }
        pmainNode4 = (PMain)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(null, listNode3, pmainNode4);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramme2Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PParameters pparametersNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PMain pmainNode4;
        pparametersNode2 = (PParameters)nodeArrayList1.get(0);
        {
            // Block
        }
        pmainNode4 = (PMain)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(pparametersNode2, listNode3, pmainNode4);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogramme3Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PMain pmainNode5;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pmainNode5 = (PMain)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(null, listNode4, pmainNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogramme4Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PParameters pparametersNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PMain pmainNode5;
        pparametersNode2 = (PParameters)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pmainNode5 = (PMain)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(pparametersNode2, listNode4, pmainNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFalseRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        prealvaluesNode1 = new AFalseRealvalues(tfalseNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATrueRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        prealvaluesNode1 = new ATrueRealvalues(ttrueNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANombreRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        prealvaluesNode1 = new ANombreRealvalues(tnombreNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        popNode1 = new APlusOp(tplusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        popNode1 = new AMinusOp(tminusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMultOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        popNode1 = new AMultOp(tmultNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADivOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        popNode1 = new ADivOp(tdivNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATrueBooleans */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleans pbooleansNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleansNode1 = new ATrueBooleans(ttrueNode2);
        }
	nodeList.add(pbooleansNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFalseBooleans */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleans pbooleansNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleansNode1 = new AFalseBooleans(tfalseNode2);
        }
	nodeList.add(pbooleansNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAloop1Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        PValue pvalueNode3;
        TDo tdoNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList5.get(0);

        ploopNode1 = new ALoop(twhileNode2, pvalueNode3, tdoNode4, tstartfuncNode5, listNode6, tendfuncNode7);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAloop2Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        PValue pvalueNode3;
        TDo tdoNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEndfunc tendfuncNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendfuncNode8 = (TEndfunc)nodeArrayList6.get(0);

        ploopNode1 = new ALoop(twhileNode2, pvalueNode3, tdoNode4, tstartfuncNode5, listNode7, tendfuncNode8);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AOrLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLog plogNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        plogNode1 = new AOrLog(torNode2);
        }
	nodeList.add(plogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAndLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLog plogNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        plogNode1 = new AAndLog(tandNode2);
        }
	nodeList.add(plogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ABiggerCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TBigger tbiggerNode2;
        tbiggerNode2 = (TBigger)nodeArrayList1.get(0);

        pcmpNode1 = new ABiggerCmp(tbiggerNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASmallerCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TSmaller tsmallerNode2;
        tsmallerNode2 = (TSmaller)nodeArrayList1.get(0);

        pcmpNode1 = new ASmallerCmp(tsmallerNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ANotequalCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TNotequal tnotequalNode2;
        tnotequalNode2 = (TNotequal)nodeArrayList1.get(0);

        pcmpNode1 = new ANotequalCmp(tnotequalNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEqualCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcmpNode1 = new AEqualCmp(tequalNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ALogOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperations poperationsNode1;
        {
            // Block
        PLog plogNode2;
        plogNode2 = (PLog)nodeArrayList1.get(0);

        poperationsNode1 = new ALogOperations(plogNode2);
        }
	nodeList.add(poperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACmpOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperations poperationsNode1;
        {
            // Block
        PCmp pcmpNode2;
        pcmpNode2 = (PCmp)nodeArrayList1.get(0);

        poperationsNode1 = new ACmpOperations(pcmpNode2);
        }
	nodeList.add(poperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AOpOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperations poperationsNode1;
        {
            // Block
        POp popNode2;
        popNode2 = (POp)nodeArrayList1.get(0);

        poperationsNode1 = new AOpOperations(popNode2);
        }
	nodeList.add(poperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAidentifsinglevalue1Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        psinglevalueNode1 = new AIdentifSinglevalue(tidentifNode2, null);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAidentifsinglevalue2Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PTablevalues ptablevaluesNode3;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        ptablevaluesNode3 = (PTablevalues)nodeArrayList2.get(0);

        psinglevalueNode1 = new AIdentifSinglevalue(tidentifNode2, ptablevaluesNode3);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABooleansSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        PBooleans pbooleansNode2;
        pbooleansNode2 = (PBooleans)nodeArrayList1.get(0);

        psinglevalueNode1 = new ABooleansSinglevalue(pbooleansNode2);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ANombreSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        psinglevalueNode1 = new ANombreSinglevalue(tnombreNode2);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAcallfunctionsinglevalue1Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRp trpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        trpNode5 = (TRp)nodeArrayList3.get(0);

        psinglevalueNode1 = new ACallfunctionSinglevalue(tidentifNode2, tlpNode3, null, trpNode5);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAcallfunctionsinglevalue2Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PNparam pnparamNode4;
        TRp trpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);

        psinglevalueNode1 = new ACallfunctionSinglevalue(tidentifNode2, tlpNode3, pnparamNode4, trpNode5);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMultiplevaluesValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PSinglevalue psinglevalueNode2;
        POperations poperationsNode3;
        PValue pvalueNode4;
        psinglevalueNode2 = (PSinglevalue)nodeArrayList1.get(0);
        poperationsNode3 = (POperations)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pvalueNode1 = new AMultiplevaluesValue(psinglevalueNode2, poperationsNode3, pvalueNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ASinglevalueValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PSinglevalue psinglevalueNode2;
        psinglevalueNode2 = (PSinglevalue)nodeArrayList1.get(0);

        pvalueNode1 = new ASinglevalueValue(psinglevalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABraketsValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TLp tlpNode2;
        PValue pvalueNode3;
        TRp trpNode4;
        tlpNode2 = (TLp)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);

        pvalueNode1 = new ABraketsValue(tlpNode2, pvalueNode3, trpNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANotvalueValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TNot tnotNode2;
        PValue pvalueNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pvalueNode1 = new ANotvalueValue(tnotNode2, pvalueNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAcondition1Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        PValue pvalueNode3;
        TAlors talorsNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList5.get(0);

        pconditionNode1 = new ACondition(tsiNode2, pvalueNode3, talorsNode4, tstartfuncNode5, listNode6, tendfuncNode7, null);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAcondition2Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        PValue pvalueNode3;
        TAlors talorsNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEndfunc tendfuncNode8;
        @SuppressWarnings("unused") Object nullNode9 = null;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendfuncNode8 = (TEndfunc)nodeArrayList6.get(0);

        pconditionNode1 = new ACondition(tsiNode2, pvalueNode3, talorsNode4, tstartfuncNode5, listNode7, tendfuncNode8, null);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAcondition3Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        PValue pvalueNode3;
        TAlors talorsNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        PElsecondition pelseconditionNode8;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList5.get(0);
        pelseconditionNode8 = (PElsecondition)nodeArrayList6.get(0);

        pconditionNode1 = new ACondition(tsiNode2, pvalueNode3, talorsNode4, tstartfuncNode5, listNode6, tendfuncNode7, pelseconditionNode8);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAcondition4Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        PValue pvalueNode3;
        TAlors talorsNode4;
        TStartfunc tstartfuncNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEndfunc tendfuncNode8;
        PElsecondition pelseconditionNode9;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        tstartfuncNode5 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendfuncNode8 = (TEndfunc)nodeArrayList6.get(0);
        pelseconditionNode9 = (PElsecondition)nodeArrayList7.get(0);

        pconditionNode1 = new ACondition(tsiNode2, pvalueNode3, talorsNode4, tstartfuncNode5, listNode7, tendfuncNode8, pelseconditionNode9);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAelsecondition1Elsecondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsecondition pelseconditionNode1;
        {
            // Block
        TElse telseNode2;
        TStartfunc tstartfuncNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEndfunc tendfuncNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tstartfuncNode3 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        }
        tendfuncNode5 = (TEndfunc)nodeArrayList3.get(0);

        pelseconditionNode1 = new AElsecondition(telseNode2, tstartfuncNode3, listNode4, tendfuncNode5);
        }
	nodeList.add(pelseconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAelsecondition2Elsecondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsecondition pelseconditionNode1;
        {
            // Block
        TElse telseNode2;
        TStartfunc tstartfuncNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tstartfuncNode3 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList4.get(0);

        pelseconditionNode1 = new AElsecondition(telseNode2, tstartfuncNode3, listNode5, tendfuncNode6);
        }
	nodeList.add(pelseconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAparameters1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PParameter pparameterNode3;
        {
            // Block
        }
        pparameterNode3 = (PParameter)nodeArrayList1.get(0);

        pparametersNode1 = new AParameters(listNode2, pparameterNode3);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAparameters2Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PParameter pparameterNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pparameterNode4 = (PParameter)nodeArrayList2.get(0);

        pparametersNode1 = new AParameters(listNode3, pparameterNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AParametervirgul */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametervirgul pparametervirgulNode1;
        {
            // Block
        PParameter pparameterNode2;
        TVirgul tvirgulNode3;
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        tvirgulNode3 = (TVirgul)nodeArrayList2.get(0);

        pparametervirgulNode1 = new AParametervirgul(pparameterNode2, tvirgulNode3);
        }
	nodeList.add(pparametervirgulNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAparameter1Parameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifNode3, null);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAparameter2Parameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        PTablesize ptablesizeNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        ptablesizeNode4 = (PTablesize)nodeArrayList3.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifNode3, ptablesizeNode4);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATablesize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTablesize ptablesizeNode1;
        {
            // Block
        TRb trbNode2;
        TNombre tnombreNode3;
        TLb tlbNode4;
        trbNode2 = (TRb)nodeArrayList1.get(0);
        tnombreNode3 = (TNombre)nodeArrayList2.get(0);
        tlbNode4 = (TLb)nodeArrayList3.get(0);

        ptablesizeNode1 = new ATablesize(trbNode2, tnombreNode3, tlbNode4);
        }
	nodeList.add(ptablesizeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIdentifRealtablevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealtablevalue prealtablevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        prealtablevalueNode1 = new AIdentifRealtablevalue(tidentifNode2);
        }
	nodeList.add(prealtablevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANombreRealtablevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealtablevalue prealtablevalueNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        prealtablevalueNode1 = new ANombreRealtablevalue(tnombreNode2);
        }
	nodeList.add(prealtablevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATablevalueRealtablevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealtablevalue prealtablevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PTablevalues ptablevaluesNode3;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        ptablevaluesNode3 = (PTablevalues)nodeArrayList2.get(0);

        prealtablevalueNode1 = new ATablevalueRealtablevalue(tidentifNode2, ptablevaluesNode3);
        }
	nodeList.add(prealtablevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMultipleTablevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTablevalue ptablevalueNode1;
        {
            // Block
        PRealtablevalue prealtablevalueNode2;
        POp popNode3;
        PTablevalue ptablevalueNode4;
        prealtablevalueNode2 = (PRealtablevalue)nodeArrayList1.get(0);
        popNode3 = (POp)nodeArrayList2.get(0);
        ptablevalueNode4 = (PTablevalue)nodeArrayList3.get(0);

        ptablevalueNode1 = new AMultipleTablevalue(prealtablevalueNode2, popNode3, ptablevalueNode4);
        }
	nodeList.add(ptablevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ASingleTablevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTablevalue ptablevalueNode1;
        {
            // Block
        PRealtablevalue prealtablevalueNode2;
        prealtablevalueNode2 = (PRealtablevalue)nodeArrayList1.get(0);

        ptablevalueNode1 = new ASingleTablevalue(prealtablevalueNode2);
        }
	nodeList.add(ptablevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ATablevalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTablevalues ptablevaluesNode1;
        {
            // Block
        TRb trbNode2;
        PTablevalue ptablevalueNode3;
        TLb tlbNode4;
        trbNode2 = (TRb)nodeArrayList1.get(0);
        ptablevalueNode3 = (PTablevalue)nodeArrayList2.get(0);
        tlbNode4 = (TLb)nodeArrayList3.get(0);

        ptablevaluesNode1 = new ATablevalues(trbNode2, ptablevalueNode3, tlbNode4);
        }
	nodeList.add(ptablevaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        trpNode6 = (TRp)nodeArrayList3.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList5.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAfunction3Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        pparametersNode5 = (PParameters)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAfunction4Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAfunction5Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        trpNode6 = (TRp)nodeArrayList3.get(0);
        pparametersNode7 = (PParameters)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAfunction6Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAfunction7Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        pparametersNode5 = (PParameters)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAfunction8Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        pparametersNode7 = (PParameters)nodeArrayList6.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList7.get(0);
        {
            // Block
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList8.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, tendfuncNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAfunction9Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        trpNode6 = (TRp)nodeArrayList3.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAfunction10Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAfunction11Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        pparametersNode5 = (PParameters)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAfunction12Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList8.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAfunction13Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        trpNode6 = (TRp)nodeArrayList3.get(0);
        pparametersNode7 = (PParameters)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAfunction14Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList8.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAfunction15Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tlpNode4 = (TLp)nodeArrayList2.get(0);
        pparametersNode5 = (PParameters)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList8.get(0);

        pfunctionNode1 = new AFunction(null, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAfunction16Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndfunc tendfuncNode11;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        pparametersNode7 = (PParameters)nodeArrayList6.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendfuncNode11 = (TEndfunc)nodeArrayList9.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, tendfuncNode11);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAmain1Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList3.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, null, tstartfuncNode4, listNode5, tendfuncNode6);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAmain2Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        PParameters pparametersNode3;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList2.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList3.get(0);
        {
            // Block
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList4.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, pparametersNode3, tstartfuncNode4, listNode5, tendfuncNode6);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAmain3Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList4.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, null, tstartfuncNode4, listNode6, tendfuncNode7);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAmain4Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        PParameters pparametersNode3;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList2.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList5.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, pparametersNode3, tstartfuncNode4, listNode6, tendfuncNode7);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AMultiparamNparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparam pnparamNode1;
        {
            // Block
        PValue pvalueNode2;
        TVirgul tvirgulNode3;
        PNparam pnparamNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tvirgulNode3 = (TVirgul)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);

        pnparamNode1 = new AMultiparamNparam(pvalueNode2, tvirgulNode3, pnparamNode4);
        }
	nodeList.add(pnparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ASingleparamNparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparam pnparamNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pnparamNode1 = new ASingleparamNparam(pvalueNode2);
        }
	nodeList.add(pnparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PAffectation paffectationNode2;
        TPv tpvNode3;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);
        tpvNode3 = (TPv)nodeArrayList2.get(0);

        pinstructionNode1 = new AAffectationInstruction(paffectationNode2, tpvNode3);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AConditionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PCondition pconditionNode2;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);

        pinstructionNode1 = new AConditionInstruction(pconditionNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAcallfuncinstruction1Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRp trpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        trpNode5 = (TRp)nodeArrayList3.get(0);
        tpvNode6 = (TPv)nodeArrayList4.get(0);

        pinstructionNode1 = new ACallfuncInstruction(tidentifNode2, tlpNode3, null, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAcallfuncinstruction2Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PNparam pnparamNode4;
        TRp trpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pinstructionNode1 = new ACallfuncInstruction(tidentifNode2, tlpNode3, pnparamNode4, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AAreadinstruction1Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TEqual tequalNode4;
        TRead treadNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tequalNode4 = (TEqual)nodeArrayList2.get(0);
        treadNode5 = (TRead)nodeArrayList3.get(0);
        tpvNode6 = (TPv)nodeArrayList4.get(0);

        pinstructionNode1 = new AReadInstruction(tidentifNode2, null, tequalNode4, treadNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAreadinstruction2Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PTablevalues ptablevaluesNode3;
        TEqual tequalNode4;
        TRead treadNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        ptablevaluesNode3 = (PTablevalues)nodeArrayList2.get(0);
        tequalNode4 = (TEqual)nodeArrayList3.get(0);
        treadNode5 = (TRead)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pinstructionNode1 = new AReadInstruction(tidentifNode2, ptablevaluesNode3, tequalNode4, treadNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AWriteInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TWrite twriteNode2;
        TLp tlpNode3;
        PValue pvalueNode4;
        TRp trpNode5;
        TPv tpvNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pinstructionNode1 = new AWriteInstruction(twriteNode2, tlpNode3, pvalueNode4, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AReturnstatementInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PReturnstatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnstatement)nodeArrayList1.get(0);

        pinstructionNode1 = new AReturnstatementInstruction(preturnstatementNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ALoopInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PLoop ploopNode2;
        ploopNode2 = (PLoop)nodeArrayList1.get(0);

        pinstructionNode1 = new ALoopInstruction(ploopNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAaffectation1Affectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        TIdentif tidentifNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TEqual tequalNode4;
        PValue pvalueNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tequalNode4 = (TEqual)nodeArrayList2.get(0);
        pvalueNode5 = (PValue)nodeArrayList3.get(0);

        paffectationNode1 = new AAffectation(tidentifNode2, null, tequalNode4, pvalueNode5);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAaffectation2Affectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PTablevalues ptablevaluesNode3;
        TEqual tequalNode4;
        PValue pvalueNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        ptablevaluesNode3 = (PTablevalues)nodeArrayList2.get(0);
        tequalNode4 = (TEqual)nodeArrayList3.get(0);
        pvalueNode5 = (PValue)nodeArrayList4.get(0);

        paffectationNode1 = new AAffectation(tidentifNode2, ptablevaluesNode3, tequalNode4, pvalueNode5);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AReturnstatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnstatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PValue pvalueNode3;
        TPv tpvNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        tpvNode4 = (TPv)nodeArrayList3.get(0);

        preturnstatementNode1 = new AReturnstatement(treturnNode2, pvalueNode3, tpvNode4);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	if(pfunctionNode1 != null)
	{
	  listNode2.add(pfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunction pfunctionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionNode2 = (PFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionNode2 != null)
	{
	  listNode3.add(pfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstruction pinstructionNode1;
        pinstructionNode1 = (PInstruction)nodeArrayList1.get(0);
	if(pinstructionNode1 != null)
	{
	  listNode2.add(pinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInstruction pinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstructionNode2 = (PInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstructionNode2 != null)
	{
	  listNode3.add(pinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$Parametervirgul */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametervirgul pparametervirgulNode1;
        pparametervirgulNode1 = (PParametervirgul)nodeArrayList1.get(0);
	if(pparametervirgulNode1 != null)
	{
	  listNode2.add(pparametervirgulNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$Parametervirgul */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametervirgul pparametervirgulNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametervirgulNode2 = (PParametervirgul)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametervirgulNode2 != null)
	{
	  listNode3.add(pparametervirgulNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, {19, SHIFT, 2}, {20, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 3}, {10, SHIFT, 14}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 4}, {7, SHIFT, 17}, },
			{{-1, ERROR, 5}, {34, ACCEPT, -1}, },
			{{-1, ERROR, 6}, {33, SHIFT, 18}, },
			{{-1, ERROR, 7}, {18, SHIFT, 1}, {19, SHIFT, 2}, {20, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 22}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 12}, {18, SHIFT, 1}, {19, SHIFT, 2}, {20, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, ERROR, 13}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 14}, {2, SHIFT, 27}, {11, SHIFT, 28}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 15}, {33, SHIFT, 39}, },
			{{-1, ERROR, 16}, {10, SHIFT, 40}, },
			{{-1, ERROR, 17}, {8, SHIFT, 41}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, REDUCE, 45}, {7, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, ERROR, 19}, {33, SHIFT, 46}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 21}, {18, SHIFT, 1}, {19, SHIFT, 2}, {20, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 43}, {0, SHIFT, 22}, },
			{{-1, ERROR, 27}, {7, SHIFT, 48}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 29}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 30}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 31}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 32}, {7, SHIFT, 60}, {9, SHIFT, 61}, {12, SHIFT, 62}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 36}, {14, SHIFT, 64}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 38}, {2, SHIFT, 27}, {11, SHIFT, 65}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 45}, {12, SHIFT, 44}, },
			{{-1, ERROR, 40}, {2, SHIFT, 27}, {11, SHIFT, 67}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 41}, {10, SHIFT, 69}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 42}, {8, SHIFT, 71}, },
			{{-1, ERROR, 43}, {8, SHIFT, 72}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 44}, {1, SHIFT, 74}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 46}, {7, SHIFT, 43}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 48}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 50}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 53}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 26}, {7, SHIFT, 78}, {12, SHIFT, 62}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 33}, {3, SHIFT, 80}, {4, SHIFT, 81}, {5, SHIFT, 82}, {6, SHIFT, 83}, {9, SHIFT, 84}, {22, SHIFT, 85}, {23, SHIFT, 86}, {25, SHIFT, 87}, {26, SHIFT, 88}, {27, SHIFT, 89}, },
			{{-1, ERROR, 57}, {14, SHIFT, 94}, },
			{{-1, ERROR, 58}, {28, SHIFT, 95}, },
			{{-1, ERROR, 59}, {31, SHIFT, 96}, },
			{{-1, ERROR, 60}, {1, SHIFT, 49}, {7, SHIFT, 50}, {8, SHIFT, 97}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 61}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {32, SHIFT, 100}, {33, SHIFT, 54}, },
			{{-1, ERROR, 62}, {1, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, ERROR, 63}, {9, SHIFT, 106}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 68}, {2, SHIFT, 27}, {11, SHIFT, 107}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 69}, {2, SHIFT, 27}, {11, SHIFT, 108}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 70}, {10, SHIFT, 110}, },
			{{-1, ERROR, 71}, {10, SHIFT, 111}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 72}, {10, SHIFT, 113}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 73}, {8, SHIFT, 115}, },
			{{-1, ERROR, 74}, {13, SHIFT, 116}, },
			{{-1, ERROR, 75}, {8, SHIFT, 117}, },
			{{-1, ERROR, 76}, {8, SHIFT, 118}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 78}, {1, SHIFT, 49}, {7, SHIFT, 50}, {8, SHIFT, 119}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 93}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 95}, {10, SHIFT, 122}, },
			{{-1, ERROR, 96}, {10, SHIFT, 123}, },
			{{-1, ERROR, 97}, {14, SHIFT, 124}, },
			{{-1, REDUCE, 75}, {0, SHIFT, 125}, },
			{{-1, ERROR, 99}, {8, SHIFT, 126}, },
			{{-1, ERROR, 100}, {14, SHIFT, 127}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 48}, {12, SHIFT, 62}, },
			{{-1, REDUCE, 52}, {3, SHIFT, 80}, {4, SHIFT, 81}, {5, SHIFT, 82}, {6, SHIFT, 83}, },
			{{-1, ERROR, 105}, {13, SHIFT, 130}, },
			{{-1, ERROR, 106}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {32, SHIFT, 131}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 109}, {2, SHIFT, 27}, {11, SHIFT, 133}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 110}, {2, SHIFT, 27}, {11, SHIFT, 134}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 111}, {2, SHIFT, 27}, {11, SHIFT, 136}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 112}, {10, SHIFT, 138}, },
			{{-1, ERROR, 113}, {2, SHIFT, 27}, {11, SHIFT, 139}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 114}, {10, SHIFT, 141}, },
			{{-1, ERROR, 115}, {10, SHIFT, 142}, {18, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 117}, {14, SHIFT, 144}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 120}, {8, SHIFT, 145}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 122}, {2, SHIFT, 27}, {11, SHIFT, 146}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 123}, {2, SHIFT, 27}, {11, SHIFT, 148}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 125}, {1, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {16, SHIFT, 52}, {24, SHIFT, 53}, {33, SHIFT, 54}, },
			{{-1, ERROR, 126}, {14, SHIFT, 151}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 129}, {1, SHIFT, 102}, {33, SHIFT, 103}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 131}, {14, SHIFT, 153}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 135}, {2, SHIFT, 27}, {11, SHIFT, 154}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 137}, {2, SHIFT, 27}, {11, SHIFT, 155}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 138}, {2, SHIFT, 27}, {11, SHIFT, 156}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 140}, {2, SHIFT, 27}, {11, SHIFT, 158}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 141}, {2, SHIFT, 27}, {11, SHIFT, 159}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 142}, {2, SHIFT, 27}, {11, SHIFT, 161}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 143}, {10, SHIFT, 163}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 36}, {29, SHIFT, 164}, },
			{{-1, ERROR, 147}, {2, SHIFT, 27}, {11, SHIFT, 166}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 149}, {2, SHIFT, 27}, {11, SHIFT, 167}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 157}, {2, SHIFT, 27}, {11, SHIFT, 168}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 160}, {2, SHIFT, 27}, {11, SHIFT, 169}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 162}, {2, SHIFT, 27}, {11, SHIFT, 170}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 163}, {2, SHIFT, 27}, {11, SHIFT, 171}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 164}, {10, SHIFT, 173}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, {29, SHIFT, 164}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 172}, {2, SHIFT, 27}, {11, SHIFT, 175}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, ERROR, 173}, {2, SHIFT, 27}, {11, SHIFT, 176}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 177}, {2, SHIFT, 27}, {11, SHIFT, 178}, {17, SHIFT, 29}, {21, SHIFT, 30}, {30, SHIFT, 31}, {33, SHIFT, 32}, },
			{{-1, REDUCE, 41}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, -1}, },
			{{-1, 15}, {0, 6}, {7, 19}, {12, 19}, {21, 19}, },
			{{-1, 90}, {104, 129}, },
			{{-1, 55}, },
			{{-1, 33}, },
			{{-1, 91}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 56}, },
			{{-1, 98}, {29, 57}, {30, 58}, {31, 59}, {48, 75}, {50, 76}, {53, 77}, {61, 101}, {93, 121}, {106, 132}, },
			{{-1, 34}, },
			{{-1, 165}, {166, 174}, },
			{{-1, 7}, {3, 16}, {17, 42}, {41, 70}, {43, 73}, {71, 112}, {72, 114}, {115, 143}, },
			{{-1, 8}, {13, 25}, },
			{{-1, 9}, {13, 26}, },
			{{-1, 45}, },
			{{-1, 104}, },
			{{-1, 105}, {129, 152}, },
			{{-1, 63}, {54, 79}, {103, 128}, },
			{{-1, 10}, {12, 23}, {21, 23}, },
			{{-1, 11}, {7, 20}, {12, 24}, {21, 47}, },
			{{-1, 99}, {78, 120}, {125, 150}, },
			{{-1, 35}, {38, 66}, {68, 66}, {109, 66}, {135, 66}, {137, 66}, {140, 66}, {147, 66}, {149, 66}, {157, 66}, {160, 66}, {162, 66}, {172, 66}, {177, 66}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 12}, {7, 21}, },
			{{-1, 38}, {40, 68}, {69, 109}, {110, 135}, {111, 137}, {113, 140}, {122, 147}, {123, 149}, {138, 157}, {141, 160}, {142, 162}, {163, 172}, {173, 177}, },
			{{-1, 13}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'bool', 'main()', identif",
			"expecting: identif",
			"expecting: '{', 'entier', 'bool'",
			"expecting: '('",
			"expecting: EOF",
			"expecting: 'entier', 'bool'",
			"expecting: ',', ')', '{', 'entier', 'bool', 'main()', identif",
			"expecting: 'ecrire', '}', 'retour', 'si', 'tantque', identif",
			"expecting: '{'",
			"expecting: ')', 'entier', 'bool'",
			"expecting: ',', '(', '[', 'entier', 'bool', 'main()', identif",
			"expecting: nombre, '(', 'true', 'false', '!', identif",
			"expecting: '(', '=', '['",
			"expecting: ';'",
			"expecting: ',', ')', '{', '[', 'entier', 'bool', 'main()', identif",
			"expecting: ')'",
			"expecting: nombre",
			"expecting: ',', '+', '-', '*', '/', ')', '=', ';', '&', '|', '>', '<', '!=', 'alors', 'faire'",
			"expecting: ',', '+', '-', '*', '/', '(', ')', '=', '[', ';', '&', '|', '>', '<', '!=', 'alors', 'faire'",
			"expecting: 'alors'",
			"expecting: 'faire'",
			"expecting: nombre, '(', ')', 'true', 'false', '!', identif",
			"expecting: nombre, '(', 'true', 'false', '!', 'lire();', identif",
			"expecting: nombre, identif",
			"expecting: '='",
			"expecting: ']'",
			"expecting: ',', ')', ';', 'alors', 'faire'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '*', '/', ']'",
			"expecting: '+', '-', '*', '/', '[', ']'",
			"expecting: ',', '+', '-', '*', '/', ')', '=', ']', ';', '&', '|', '>', '<', '!=', 'alors', 'faire'",
			"expecting: 'ecrire', '}', 'retour', 'si', 'sinon', 'tantque', identif",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 1, 0, 5, 6, 0, 4, 0, 5, 7, 1, 8, 9, 10, 1, 4, 0, 5, 0, 4, 5, 6, 3, 4, 11, 11, 11, 12, 7, 7, 7, 13, 7, 7, 14, 7, 2, 15, 9, 16, 6, 3, 4, 11, 17, 11, 17, 17, 11, 18, 17, 17, 13, 19, 20, 21, 22, 23, 24, 7, 4, 7, 4, 7, 7, 8, 2, 2, 15, 25, 15, 15, 26, 21, 17, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 8, 8, 13, 27, 15, 13, 13, 28, 29, 28, 25, 22, 4, 0, 7, 7, 7, 8, 7, 8, 2, 6, 13, 26, 17, 15, 26, 7, 7, 7, 11, 13, 7, 28, 23, 30, 13, 13, 0, 0, 7, 0, 7, 7, 0, 7, 7, 7, 8, 7, 17, 31, 7, 7, 7, 15, 7, 25, 7, 0, 0, 0, 7, 0, 0, 7, 0, 7, 7, 8, 7, 31, 7, 0, 0, 0, 0, 7, 7, 7, 0, 7, 7, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
