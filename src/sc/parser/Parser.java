/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramme1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogramme2Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAlistedecfonc1Listedecfonc */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAlistedecfonc2Listedecfonc */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAfonction1Fonction */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAfonction2Fonction */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAfonction3Fonction */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAfonction4Fonction */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAfonction5Fonction */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AAfonction6Fonction */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAfonction7Fonction */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAfonction8Fonction */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AAmain1Main */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce AAmain2Main */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce AAlistedecvar1Listedecvar */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce AAlistedecvar2Listedecvar */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AArguments */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAbloc1Bloc */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAbloc2Bloc */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ASiInstruction */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ATantqueInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce ARetourInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AAppelInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce ALireInstruction */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AFairetantqueInstruction */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list, false);
            }
            break;
            case 27: /* reduce AFairetantque */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce ALire */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce AEcrire */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce AAffectation */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AAsi1Si */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce AAsi2Si */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce ATantque */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce ARetour */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce AAappel1Appel */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AAappel2Appel */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AAappelsanspv1AppelSansPv */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AAappelsanspv2AppelSansPv */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AExpression */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AMultiExpou */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce ASingleExpou */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list, false);
            }
            break;
            case 42: /* reduce AMultiExpet */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list, false);
            }
            break;
            case 43: /* reduce ASingleExpet */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list, false);
            }
            break;
            case 44: /* reduce AMultiExpnon */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce ASingleExpnon */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AMultiExpComparaisonInf */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce ASingleExpComparaisonInf */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list, false);
            }
            break;
            case 48: /* reduce AMultiExpComparaisonEgale */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list, false);
            }
            break;
            case 49: /* reduce ASingleExpComparaisonEgale */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list, false);
            }
            break;
            case 50: /* reduce AMultiExpAddition */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list, false);
            }
            break;
            case 51: /* reduce ASingleExpAddition */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list, false);
            }
            break;
            case 52: /* reduce AMultiExpSub */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list, false);
            }
            break;
            case 53: /* reduce ASingleExpSub */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list, false);
            }
            break;
            case 54: /* reduce AMultiExpMultiplication */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list, false);
            }
            break;
            case 55: /* reduce ASingleExpMultiplication */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list, false);
            }
            break;
            case 56: /* reduce AMultiExpDiv */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list, false);
            }
            break;
            case 57: /* reduce ASingleExpDiv */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list, false);
            }
            break;
            case 58: /* reduce AMultiExpCarre */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list, false);
            }
            break;
            case 59: /* reduce ASingleExpCarre */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list, false);
            }
            break;
            case 60: /* reduce ANombreExpressionPrimaire */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list, false);
            }
            break;
            case 61: /* reduce APExpressionExpressionPrimaire */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list, false);
            }
            break;
            case 62: /* reduce AValBoolExpressionPrimaire */
            {
                ArrayList<Object> list = new62();
                push(goTo(28), list, false);
            }
            break;
            case 63: /* reduce AAppelExpressionPrimaire */
            {
                ArrayList<Object> list = new63();
                push(goTo(28), list, false);
            }
            break;
            case 64: /* reduce AVarExpressionPrimaire */
            {
                ArrayList<Object> list = new64();
                push(goTo(28), list, false);
            }
            break;
            case 65: /* reduce AVraiValeurbool */
            {
                ArrayList<Object> list = new65();
                push(goTo(29), list, false);
            }
            break;
            case 66: /* reduce AFauxValeurbool */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list, false);
            }
            break;
            case 67: /* reduce AEntierType */
            {
                ArrayList<Object> list = new67();
                push(goTo(30), list, false);
            }
            break;
            case 68: /* reduce ABoolType */
            {
                ArrayList<Object> list = new68();
                push(goTo(30), list, false);
            }
            break;
            case 69: /* reduce AVvar */
            {
                ArrayList<Object> list = new69();
                push(goTo(31), list, false);
            }
            break;
            case 70: /* reduce AVarSimpleVar */
            {
                ArrayList<Object> list = new70();
                push(goTo(32), list, false);
            }
            break;
            case 71: /* reduce ATableauVar */
            {
                ArrayList<Object> list = new71();
                push(goTo(32), list, false);
            }
            break;
            case 72: /* reduce AVarSimpleVarname */
            {
                ArrayList<Object> list = new72();
                push(goTo(33), list, false);
            }
            break;
            case 73: /* reduce AVarTabVarname */
            {
                ArrayList<Object> list = new73();
                push(goTo(33), list, false);
            }
            break;
            case 74: /* reduce ATypetab */
            {
                ArrayList<Object> list = new74();
                push(goTo(34), list, false);
            }
            break;
            case 75: /* reduce ATabval */
            {
                ArrayList<Object> list = new75();
                push(goTo(35), list, false);
            }
            break;
            case 76: /* reduce ASinonbloc */
            {
                ArrayList<Object> list = new76();
                push(goTo(36), list, false);
            }
            break;
            case 77: /* reduce AVexpression */
            {
                ArrayList<Object> list = new77();
                push(goTo(37), list, false);
            }
            break;
            case 78: /* reduce AAexpressionvexp1Expressionvexp */
            {
                ArrayList<Object> list = new78();
                push(goTo(38), list, false);
            }
            break;
            case 79: /* reduce AAexpressionvexp2Expressionvexp */
            {
                ArrayList<Object> list = new79();
                push(goTo(38), list, false);
            }
            break;
            case 80: /* reduce ATerminal$Fonction */
            {
                ArrayList<Object> list = new80();
                push(goTo(39), list, true);
            }
            break;
            case 81: /* reduce ANonTerminal$Fonction */
            {
                ArrayList<Object> list = new81();
                push(goTo(39), list, true);
            }
            break;
            case 82: /* reduce ATerminal$Vvar */
            {
                ArrayList<Object> list = new82();
                push(goTo(40), list, true);
            }
            break;
            case 83: /* reduce ANonTerminal$Vvar */
            {
                ArrayList<Object> list = new83();
                push(goTo(40), list, true);
            }
            break;
            case 84: /* reduce ATerminal$Instruction */
            {
                ArrayList<Object> list = new84();
                push(goTo(41), list, true);
            }
            break;
            case 85: /* reduce ANonTerminal$Instruction */
            {
                ArrayList<Object> list = new85();
                push(goTo(41), list, true);
            }
            break;
            case 86: /* reduce ATerminal$Not */
            {
                ArrayList<Object> list = new86();
                push(goTo(42), list, true);
            }
            break;
            case 87: /* reduce ANonTerminal$Not */
            {
                ArrayList<Object> list = new87();
                push(goTo(42), list, true);
            }
            break;
            case 88: /* reduce ATerminal$Vexpression */
            {
                ArrayList<Object> list = new88();
                push(goTo(43), list, true);
            }
            break;
            case 89: /* reduce ANonTerminal$Vexpression */
            {
                ArrayList<Object> list = new89();
                push(goTo(43), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramme1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PListedecfonc plistedecfoncNode3;
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(null, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramme2Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode3;
        plistedecvarNode2 = (PListedecvar)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(plistedecvarNode2, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAlistedecfonc1Listedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PMain pmainNode3;
        {
            // Block
        }
        pmainNode3 = (PMain)nodeArrayList1.get(0);

        plistedecfoncNode1 = new AListedecfonc(listNode2, pmainNode3);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAlistedecfonc2Listedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PMain pmainNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmainNode4 = (PMain)nodeArrayList2.get(0);

        plistedecfoncNode1 = new AListedecfonc(listNode3, pmainNode4);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfonction1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TRp trpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLp tlpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBloc pblocNode8;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        trpNode4 = (TRp)nodeArrayList2.get(0);
        tlpNode6 = (TLp)nodeArrayList3.get(0);
        pblocNode8 = (PBloc)nodeArrayList4.get(0);

        pfonctionNode1 = new AFonction(null, tidentifNode3, trpNode4, null, tlpNode6, null, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfonction2Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TRp trpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLp tlpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBloc pblocNode8;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);
        tlpNode6 = (TLp)nodeArrayList4.get(0);
        pblocNode8 = (PBloc)nodeArrayList5.get(0);

        pfonctionNode1 = new AFonction(ptypeNode2, tidentifNode3, trpNode4, null, tlpNode6, null, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAfonction3Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TRp trpNode4;
        PArguments pargumentsNode5;
        TLp tlpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBloc pblocNode8;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        trpNode4 = (TRp)nodeArrayList2.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList3.get(0);
        tlpNode6 = (TLp)nodeArrayList4.get(0);
        pblocNode8 = (PBloc)nodeArrayList5.get(0);

        pfonctionNode1 = new AFonction(null, tidentifNode3, trpNode4, pargumentsNode5, tlpNode6, null, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAfonction4Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TRp trpNode4;
        PArguments pargumentsNode5;
        TLp tlpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBloc pblocNode8;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList4.get(0);
        tlpNode6 = (TLp)nodeArrayList5.get(0);
        pblocNode8 = (PBloc)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeNode2, tidentifNode3, trpNode4, pargumentsNode5, tlpNode6, null, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAfonction5Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TRp trpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLp tlpNode6;
        PListedecvar plistedecvarNode7;
        PBloc pblocNode8;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        trpNode4 = (TRp)nodeArrayList2.get(0);
        tlpNode6 = (TLp)nodeArrayList3.get(0);
        plistedecvarNode7 = (PListedecvar)nodeArrayList4.get(0);
        pblocNode8 = (PBloc)nodeArrayList5.get(0);

        pfonctionNode1 = new AFonction(null, tidentifNode3, trpNode4, null, tlpNode6, plistedecvarNode7, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAfonction6Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TRp trpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TLp tlpNode6;
        PListedecvar plistedecvarNode7;
        PBloc pblocNode8;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);
        tlpNode6 = (TLp)nodeArrayList4.get(0);
        plistedecvarNode7 = (PListedecvar)nodeArrayList5.get(0);
        pblocNode8 = (PBloc)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeNode2, tidentifNode3, trpNode4, null, tlpNode6, plistedecvarNode7, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAfonction7Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentif tidentifNode3;
        TRp trpNode4;
        PArguments pargumentsNode5;
        TLp tlpNode6;
        PListedecvar plistedecvarNode7;
        PBloc pblocNode8;
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        trpNode4 = (TRp)nodeArrayList2.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList3.get(0);
        tlpNode6 = (TLp)nodeArrayList4.get(0);
        plistedecvarNode7 = (PListedecvar)nodeArrayList5.get(0);
        pblocNode8 = (PBloc)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(null, tidentifNode3, trpNode4, pargumentsNode5, tlpNode6, plistedecvarNode7, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAfonction8Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TRp trpNode4;
        PArguments pargumentsNode5;
        TLp tlpNode6;
        PListedecvar plistedecvarNode7;
        PBloc pblocNode8;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList4.get(0);
        tlpNode6 = (TLp)nodeArrayList5.get(0);
        plistedecvarNode7 = (PListedecvar)nodeArrayList6.get(0);
        pblocNode8 = (PBloc)nodeArrayList7.get(0);

        pfonctionNode1 = new AFonction(ptypeNode2, tidentifNode3, trpNode4, pargumentsNode5, tlpNode6, plistedecvarNode7, pblocNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAmain1Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfc tmainfcNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PBloc pblocNode4;
        tmainfcNode2 = (TMainfc)nodeArrayList1.get(0);
        pblocNode4 = (PBloc)nodeArrayList2.get(0);

        pmainNode1 = new AMain(tmainfcNode2, null, pblocNode4);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAmain2Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfc tmainfcNode2;
        PListedecvar plistedecvarNode3;
        PBloc pblocNode4;
        tmainfcNode2 = (TMainfc)nodeArrayList1.get(0);
        plistedecvarNode3 = (PListedecvar)nodeArrayList2.get(0);
        pblocNode4 = (PBloc)nodeArrayList3.get(0);

        pmainNode1 = new AMain(tmainfcNode2, plistedecvarNode3, pblocNode4);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAlistedecvar1Listedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar plistedecvarNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        {
            // Block
        }

        plistedecvarNode1 = new AListedecvar(pvarNode2, listNode3);
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAlistedecvar2Listedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar plistedecvarNode1;
        {
            // Block
        PVar pvarNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistedecvarNode1 = new AListedecvar(pvarNode2, listNode4);
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        plistedecvarNode2 = (PListedecvar)nodeArrayList1.get(0);

        pargumentsNode1 = new AArguments(plistedecvarNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAbloc1Bloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TAo taoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TAf tafNode4;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        {
            // Block
        }
        tafNode4 = (TAf)nodeArrayList2.get(0);

        pblocNode1 = new ABloc(taoNode2, listNode3, tafNode4);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAbloc2Bloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TAo taoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TAf tafNode5;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tafNode5 = (TAf)nodeArrayList3.get(0);

        pblocNode1 = new ABloc(taoNode2, listNode4, tafNode5);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PAffectation paffectationNode2;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);

        pinstructionNode1 = new AAffectationInstruction(paffectationNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PSi psiNode2;
        psiNode2 = (PSi)nodeArrayList1.get(0);

        pinstructionNode1 = new ASiInstruction(psiNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PTantque ptantqueNode2;
        ptantqueNode2 = (PTantque)nodeArrayList1.get(0);

        pinstructionNode1 = new ATantqueInstruction(ptantqueNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ARetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PRetour pretourNode2;
        pretourNode2 = (PRetour)nodeArrayList1.get(0);

        pinstructionNode1 = new ARetourInstruction(pretourNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAppelInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PAppel pappelNode2;
        pappelNode2 = (PAppel)nodeArrayList1.get(0);

        pinstructionNode1 = new AAppelInstruction(pappelNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PEcrire pecrireNode2;
        pecrireNode2 = (PEcrire)nodeArrayList1.get(0);

        pinstructionNode1 = new AEcrireInstruction(pecrireNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ALireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PLire plireNode2;
        plireNode2 = (PLire)nodeArrayList1.get(0);

        pinstructionNode1 = new ALireInstruction(plireNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFairetantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PFairetantque pfairetantqueNode2;
        pfairetantqueNode2 = (PFairetantque)nodeArrayList1.get(0);

        pinstructionNode1 = new AFairetantqueInstruction(pfairetantqueNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFairetantque */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFairetantque pfairetantqueNode1;
        {
            // Block
        TSFaire tsfaireNode2;
        PBloc pblocNode3;
        TTantQue ttantqueNode4;
        PExpression pexpressionNode5;
        tsfaireNode2 = (TSFaire)nodeArrayList1.get(0);
        pblocNode3 = (PBloc)nodeArrayList2.get(0);
        ttantqueNode4 = (TTantQue)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);

        pfairetantqueNode1 = new AFairetantque(tsfaireNode2, pblocNode3, ttantqueNode4, pexpressionNode5);
        }
	nodeList.add(pfairetantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ALire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLire plireNode1;
        {
            // Block
        PVarname pvarnameNode2;
        TEgale tegaleNode3;
        TRead treadNode4;
        TPv tpvNode5;
        pvarnameNode2 = (PVarname)nodeArrayList1.get(0);
        tegaleNode3 = (TEgale)nodeArrayList2.get(0);
        treadNode4 = (TRead)nodeArrayList3.get(0);
        tpvNode5 = (TPv)nodeArrayList4.get(0);

        plireNode1 = new ALire(pvarnameNode2, tegaleNode3, treadNode4, tpvNode5);
        }
	nodeList.add(plireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEcrire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEcrire pecrireNode1;
        {
            // Block
        TWrite twriteNode2;
        TRp trpNode3;
        PExpression pexpressionNode4;
        TLp tlpNode5;
        TPv tpvNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        trpNode3 = (TRp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tlpNode5 = (TLp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pecrireNode1 = new AEcrire(twriteNode2, trpNode3, pexpressionNode4, tlpNode5, tpvNode6);
        }
	nodeList.add(pecrireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        PVarname pvarnameNode2;
        TEgale tegaleNode3;
        PExpression pexpressionNode4;
        TPv tpvNode5;
        pvarnameNode2 = (PVarname)nodeArrayList1.get(0);
        tegaleNode3 = (TEgale)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpvNode5 = (TPv)nodeArrayList4.get(0);

        paffectationNode1 = new AAffectation(pvarnameNode2, tegaleNode3, pexpressionNode4, tpvNode5);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAsi1Si */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSi psiNode1;
        {
            // Block
        TSSi tssiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        tssiNode2 = (TSSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        psiNode1 = new ASi(tssiNode2, pexpressionNode3, talorsNode4, pblocNode5, null);
        }
	nodeList.add(psiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAsi2Si */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSi psiNode1;
        {
            // Block
        TSSi tssiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        PSinonbloc psinonblocNode6;
        tssiNode2 = (TSSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);
        psinonblocNode6 = (PSinonbloc)nodeArrayList5.get(0);

        psiNode1 = new ASi(tssiNode2, pexpressionNode3, talorsNode4, pblocNode5, psinonblocNode6);
        }
	nodeList.add(psiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATantque */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTantque ptantqueNode1;
        {
            // Block
        TTantQue ttantqueNode2;
        PExpression pexpressionNode3;
        TFaire tfaireNode4;
        PBloc pblocNode5;
        ttantqueNode2 = (TTantQue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        ptantqueNode1 = new ATantque(ttantqueNode2, pexpressionNode3, tfaireNode4, pblocNode5);
        }
	nodeList.add(ptantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARetour */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRetour pretourNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TPv tpvNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpvNode4 = (TPv)nodeArrayList3.get(0);

        pretourNode1 = new ARetour(treturnNode2, pexpressionNode3, tpvNode4);
        }
	nodeList.add(pretourNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAappel1Appel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppel pappelNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TRp trpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLp tlpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        trpNode3 = (TRp)nodeArrayList2.get(0);
        tlpNode5 = (TLp)nodeArrayList3.get(0);
        tpvNode6 = (TPv)nodeArrayList4.get(0);

        pappelNode1 = new AAppel(tidentifNode2, trpNode3, null, tlpNode5, tpvNode6);
        }
	nodeList.add(pappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAappel2Appel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppel pappelNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TRp trpNode3;
        PExpressionvexp pexpressionvexpNode4;
        TLp tlpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        trpNode3 = (TRp)nodeArrayList2.get(0);
        pexpressionvexpNode4 = (PExpressionvexp)nodeArrayList3.get(0);
        tlpNode5 = (TLp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pappelNode1 = new AAppel(tidentifNode2, trpNode3, pexpressionvexpNode4, tlpNode5, tpvNode6);
        }
	nodeList.add(pappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAappelsanspv1AppelSansPv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelSansPv pappelsanspvNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TRp trpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLp tlpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        trpNode3 = (TRp)nodeArrayList2.get(0);
        tlpNode5 = (TLp)nodeArrayList3.get(0);

        pappelsanspvNode1 = new AAppelSansPv(tidentifNode2, trpNode3, null, tlpNode5);
        }
	nodeList.add(pappelsanspvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAappelsanspv2AppelSansPv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelSansPv pappelsanspvNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TRp trpNode3;
        PExpressionvexp pexpressionvexpNode4;
        TLp tlpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        trpNode3 = (TRp)nodeArrayList2.get(0);
        pexpressionvexpNode4 = (PExpressionvexp)nodeArrayList3.get(0);
        tlpNode5 = (TLp)nodeArrayList4.get(0);

        pappelsanspvNode1 = new AAppelSansPv(tidentifNode2, trpNode3, pexpressionvexpNode4, tlpNode5);
        }
	nodeList.add(pappelsanspvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpou pexpouNode2;
        pexpouNode2 = (PExpou)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pexpouNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMultiExpou */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpou pexpouNode1;
        {
            // Block
        PExpou pexpouNode2;
        TOr torNode3;
        PExpet pexpetNode4;
        pexpouNode2 = (PExpou)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpetNode4 = (PExpet)nodeArrayList3.get(0);

        pexpouNode1 = new AMultiExpou(pexpouNode2, torNode3, pexpetNode4);
        }
	nodeList.add(pexpouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASingleExpou */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpou pexpouNode1;
        {
            // Block
        PExpet pexpetNode2;
        pexpetNode2 = (PExpet)nodeArrayList1.get(0);

        pexpouNode1 = new ASingleExpou(pexpetNode2);
        }
	nodeList.add(pexpouNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMultiExpet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpet pexpetNode1;
        {
            // Block
        PExpet pexpetNode2;
        TAnd tandNode3;
        PExpnon pexpnonNode4;
        pexpetNode2 = (PExpet)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpnonNode4 = (PExpnon)nodeArrayList3.get(0);

        pexpetNode1 = new AMultiExpet(pexpetNode2, tandNode3, pexpnonNode4);
        }
	nodeList.add(pexpetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASingleExpet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpet pexpetNode1;
        {
            // Block
        PExpnon pexpnonNode2;
        pexpnonNode2 = (PExpnon)nodeArrayList1.get(0);

        pexpetNode1 = new ASingleExpet(pexpnonNode2);
        }
	nodeList.add(pexpetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultiExpnon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpnon pexpnonNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpComparaisonInf pexpcomparaisoninfNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpcomparaisoninfNode4 = (PExpComparaisonInf)nodeArrayList2.get(0);

        pexpnonNode1 = new AMultiExpnon(listNode3, pexpcomparaisoninfNode4);
        }
	nodeList.add(pexpnonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASingleExpnon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpnon pexpnonNode1;
        {
            // Block
        PExpComparaisonInf pexpcomparaisoninfNode2;
        pexpcomparaisoninfNode2 = (PExpComparaisonInf)nodeArrayList1.get(0);

        pexpnonNode1 = new ASingleExpnon(pexpcomparaisoninfNode2);
        }
	nodeList.add(pexpnonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMultiExpComparaisonInf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComparaisonInf pexpcomparaisoninfNode1;
        {
            // Block
        PExpComparaisonInf pexpcomparaisoninfNode2;
        TInf tinfNode3;
        PExpComparaisonEgale pexpcomparaisonegaleNode4;
        pexpcomparaisoninfNode2 = (PExpComparaisonInf)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpcomparaisonegaleNode4 = (PExpComparaisonEgale)nodeArrayList3.get(0);

        pexpcomparaisoninfNode1 = new AMultiExpComparaisonInf(pexpcomparaisoninfNode2, tinfNode3, pexpcomparaisonegaleNode4);
        }
	nodeList.add(pexpcomparaisoninfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASingleExpComparaisonInf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComparaisonInf pexpcomparaisoninfNode1;
        {
            // Block
        PExpComparaisonEgale pexpcomparaisonegaleNode2;
        pexpcomparaisonegaleNode2 = (PExpComparaisonEgale)nodeArrayList1.get(0);

        pexpcomparaisoninfNode1 = new ASingleExpComparaisonInf(pexpcomparaisonegaleNode2);
        }
	nodeList.add(pexpcomparaisoninfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMultiExpComparaisonEgale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComparaisonEgale pexpcomparaisonegaleNode1;
        {
            // Block
        PExpComparaisonEgale pexpcomparaisonegaleNode2;
        TEgale tegaleNode3;
        PExpAddition pexpadditionNode4;
        pexpcomparaisonegaleNode2 = (PExpComparaisonEgale)nodeArrayList1.get(0);
        tegaleNode3 = (TEgale)nodeArrayList2.get(0);
        pexpadditionNode4 = (PExpAddition)nodeArrayList3.get(0);

        pexpcomparaisonegaleNode1 = new AMultiExpComparaisonEgale(pexpcomparaisonegaleNode2, tegaleNode3, pexpadditionNode4);
        }
	nodeList.add(pexpcomparaisonegaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASingleExpComparaisonEgale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComparaisonEgale pexpcomparaisonegaleNode1;
        {
            // Block
        PExpAddition pexpadditionNode2;
        pexpadditionNode2 = (PExpAddition)nodeArrayList1.get(0);

        pexpcomparaisonegaleNode1 = new ASingleExpComparaisonEgale(pexpadditionNode2);
        }
	nodeList.add(pexpcomparaisonegaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultiExpAddition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAddition pexpadditionNode1;
        {
            // Block
        PExpAddition pexpadditionNode2;
        TPlus tplusNode3;
        PExpSub pexpsubNode4;
        pexpadditionNode2 = (PExpAddition)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpsubNode4 = (PExpSub)nodeArrayList3.get(0);

        pexpadditionNode1 = new AMultiExpAddition(pexpadditionNode2, tplusNode3, pexpsubNode4);
        }
	nodeList.add(pexpadditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASingleExpAddition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAddition pexpadditionNode1;
        {
            // Block
        PExpSub pexpsubNode2;
        pexpsubNode2 = (PExpSub)nodeArrayList1.get(0);

        pexpadditionNode1 = new ASingleExpAddition(pexpsubNode2);
        }
	nodeList.add(pexpadditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMultiExpSub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpSub pexpsubNode1;
        {
            // Block
        PExpSub pexpsubNode2;
        TMinus tminusNode3;
        PExpMultiplication pexpmultiplicationNode4;
        pexpsubNode2 = (PExpSub)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpmultiplicationNode4 = (PExpMultiplication)nodeArrayList3.get(0);

        pexpsubNode1 = new AMultiExpSub(pexpsubNode2, tminusNode3, pexpmultiplicationNode4);
        }
	nodeList.add(pexpsubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASingleExpSub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpSub pexpsubNode1;
        {
            // Block
        PExpMultiplication pexpmultiplicationNode2;
        pexpmultiplicationNode2 = (PExpMultiplication)nodeArrayList1.get(0);

        pexpsubNode1 = new ASingleExpSub(pexpmultiplicationNode2);
        }
	nodeList.add(pexpsubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultiExpMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpMultiplication pexpmultiplicationNode1;
        {
            // Block
        PExpMultiplication pexpmultiplicationNode2;
        TMult tmultNode3;
        PExpDiv pexpdivNode4;
        pexpmultiplicationNode2 = (PExpMultiplication)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpdivNode4 = (PExpDiv)nodeArrayList3.get(0);

        pexpmultiplicationNode1 = new AMultiExpMultiplication(pexpmultiplicationNode2, tmultNode3, pexpdivNode4);
        }
	nodeList.add(pexpmultiplicationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASingleExpMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpMultiplication pexpmultiplicationNode1;
        {
            // Block
        PExpDiv pexpdivNode2;
        pexpdivNode2 = (PExpDiv)nodeArrayList1.get(0);

        pexpmultiplicationNode1 = new ASingleExpMultiplication(pexpdivNode2);
        }
	nodeList.add(pexpmultiplicationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMultiExpDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpDiv pexpdivNode1;
        {
            // Block
        PExpDiv pexpdivNode2;
        TDiv tdivNode3;
        PExpressionPrimaire pexpressionprimaireNode4;
        pexpdivNode2 = (PExpDiv)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpressionprimaireNode4 = (PExpressionPrimaire)nodeArrayList3.get(0);

        pexpdivNode1 = new AMultiExpDiv(pexpdivNode2, tdivNode3, pexpressionprimaireNode4);
        }
	nodeList.add(pexpdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASingleExpDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpDiv pexpdivNode1;
        {
            // Block
        PExpCarre pexpcarreNode2;
        pexpcarreNode2 = (PExpCarre)nodeArrayList1.get(0);

        pexpdivNode1 = new ASingleExpDiv(pexpcarreNode2);
        }
	nodeList.add(pexpdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMultiExpCarre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpCarre pexpcarreNode1;
        {
            // Block
        PExpCarre pexpcarreNode2;
        TCarre tcarreNode3;
        pexpcarreNode2 = (PExpCarre)nodeArrayList1.get(0);
        tcarreNode3 = (TCarre)nodeArrayList2.get(0);

        pexpcarreNode1 = new AMultiExpCarre(pexpcarreNode2, tcarreNode3);
        }
	nodeList.add(pexpcarreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASingleExpCarre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpCarre pexpcarreNode1;
        {
            // Block
        PExpressionPrimaire pexpressionprimaireNode2;
        pexpressionprimaireNode2 = (PExpressionPrimaire)nodeArrayList1.get(0);

        pexpcarreNode1 = new ASingleExpCarre(pexpressionprimaireNode2);
        }
	nodeList.add(pexpcarreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANombreExpressionPrimaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionPrimaire pexpressionprimaireNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpressionprimaireNode1 = new ANombreExpressionPrimaire(tnombreNode2);
        }
	nodeList.add(pexpressionprimaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APExpressionExpressionPrimaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionPrimaire pexpressionprimaireNode1;
        {
            // Block
        TRp trpNode2;
        PExpression pexpressionNode3;
        TLp tlpNode4;
        trpNode2 = (TRp)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);

        pexpressionprimaireNode1 = new APExpressionExpressionPrimaire(trpNode2, pexpressionNode3, tlpNode4);
        }
	nodeList.add(pexpressionprimaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AValBoolExpressionPrimaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionPrimaire pexpressionprimaireNode1;
        {
            // Block
        PValeurbool pvaleurboolNode2;
        pvaleurboolNode2 = (PValeurbool)nodeArrayList1.get(0);

        pexpressionprimaireNode1 = new AValBoolExpressionPrimaire(pvaleurboolNode2);
        }
	nodeList.add(pexpressionprimaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAppelExpressionPrimaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionPrimaire pexpressionprimaireNode1;
        {
            // Block
        PAppelSansPv pappelsanspvNode2;
        pappelsanspvNode2 = (PAppelSansPv)nodeArrayList1.get(0);

        pexpressionprimaireNode1 = new AAppelExpressionPrimaire(pappelsanspvNode2);
        }
	nodeList.add(pexpressionprimaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AVarExpressionPrimaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionPrimaire pexpressionprimaireNode1;
        {
            // Block
        PVarname pvarnameNode2;
        pvarnameNode2 = (PVarname)nodeArrayList1.get(0);

        pexpressionprimaireNode1 = new AVarExpressionPrimaire(pvarnameNode2);
        }
	nodeList.add(pexpressionprimaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AVraiValeurbool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValeurbool pvaleurboolNode1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pvaleurboolNode1 = new AVraiValeurbool(tvraiNode2);
        }
	nodeList.add(pvaleurboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AFauxValeurbool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValeurbool pvaleurboolNode1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pvaleurboolNode1 = new AFauxValeurbool(tfauxNode2);
        }
	nodeList.add(pvaleurboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AVvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVvar pvvarNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PVar pvarNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pvvarNode1 = new AVvar(tvirguleNode2, pvarNode3);
        }
	nodeList.add(pvvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AVarSimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pvarNode1 = new AVarSimpleVar(ptypeNode2, tidentifNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PTypetab ptypetabNode2;
        ptypetabNode2 = (PTypetab)nodeArrayList1.get(0);

        pvarNode1 = new ATableauVar(ptypetabNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AVarSimpleVarname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarname pvarnameNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarnameNode1 = new AVarSimpleVarname(tidentifNode2);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AVarTabVarname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarname pvarnameNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCo tcoNode3;
        PExpression pexpressionNode4;
        TCf tcfNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcoNode3 = (TCo)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcfNode5 = (TCf)nodeArrayList4.get(0);

        pvarnameNode1 = new AVarTabVarname(tidentifNode2, tcoNode3, pexpressionNode4, tcfNode5);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATypetab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypetab ptypetabNode1;
        {
            // Block
        PType ptypeNode2;
        PTabval ptabvalNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ptabvalNode3 = (PTabval)nodeArrayList2.get(0);

        ptypetabNode1 = new ATypetab(ptypeNode2, ptabvalNode3);
        }
	nodeList.add(ptypetabNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATabval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTabval ptabvalNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCo tcoNode3;
        TNombre tnombreNode4;
        TCf tcfNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcoNode3 = (TCo)nodeArrayList2.get(0);
        tnombreNode4 = (TNombre)nodeArrayList3.get(0);
        tcfNode5 = (TCf)nodeArrayList4.get(0);

        ptabvalNode1 = new ATabval(tidentifNode2, tcoNode3, tnombreNode4, tcfNode5);
        }
	nodeList.add(ptabvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ASinonbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinonbloc psinonblocNode1;
        {
            // Block
        TSinon tsinonNode2;
        PBloc pblocNode3;
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        pblocNode3 = (PBloc)nodeArrayList2.get(0);

        psinonblocNode1 = new ASinonbloc(tsinonNode2, pblocNode3);
        }
	nodeList.add(psinonblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AVexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVexpression pvexpressionNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pvexpressionNode1 = new AVexpression(tvirguleNode2, pexpressionNode3);
        }
	nodeList.add(pvexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAexpressionvexp1Expressionvexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionvexp pexpressionvexpNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionvexpNode1 = new AExpressionvexp(pexpressionNode2, listNode3);
        }
	nodeList.add(pexpressionvexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAexpressionvexp2Expressionvexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionvexp pexpressionvexpNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionvexpNode1 = new AExpressionvexp(pexpressionNode2, listNode4);
        }
	nodeList.add(pexpressionvexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFonction pfonctionNode1;
        pfonctionNode1 = (PFonction)nodeArrayList1.get(0);
	if(pfonctionNode1 != null)
	{
	  listNode2.add(pfonctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFonction pfonctionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfonctionNode2 = (PFonction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfonctionNode2 != null)
	{
	  listNode3.add(pfonctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$Vvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVvar pvvarNode1;
        pvvarNode1 = (PVvar)nodeArrayList1.get(0);
	if(pvvarNode1 != null)
	{
	  listNode2.add(pvvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$Vvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVvar pvvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvvarNode2 = (PVvar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvvarNode2 != null)
	{
	  listNode3.add(pvvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstruction pinstructionNode1;
        pinstructionNode1 = (PInstruction)nodeArrayList1.get(0);
	if(pinstructionNode1 != null)
	{
	  listNode2.add(pinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInstruction pinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstructionNode2 = (PInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstructionNode2 != null)
	{
	  listNode3.add(pinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$Not */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TNot tnotNode1;
        tnotNode1 = (TNot)nodeArrayList1.get(0);
	if(tnotNode1 != null)
	{
	  listNode2.add(tnotNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$Not */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TNot tnotNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tnotNode2 = (TNot)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tnotNode2 != null)
	{
	  listNode3.add(tnotNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$Vexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVexpression pvexpressionNode1;
        pvexpressionNode1 = (PVexpression)nodeArrayList1.get(0);
	if(pvexpressionNode1 != null)
	{
	  listNode2.add(pvexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$Vexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVexpression pvexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvexpressionNode2 = (PVexpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvexpressionNode2 != null)
	{
	  listNode3.add(pvexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {10, SHIFT, 1}, {11, SHIFT, 2}, {13, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 3}, {5, SHIFT, 14}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, ERROR, 4}, {3, SHIFT, 18}, },
			{{-1, ERROR, 5}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 9}, {10, SHIFT, 1}, {11, SHIFT, 2}, {13, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, ERROR, 10}, {33, SHIFT, 21}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 23}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 13}, {10, SHIFT, 1}, {11, SHIFT, 2}, {13, SHIFT, 3}, {33, SHIFT, 4}, },
			{{-1, ERROR, 14}, {6, SHIFT, 28}, {9, SHIFT, 29}, {14, SHIFT, 30}, {17, SHIFT, 31}, {19, SHIFT, 32}, {31, SHIFT, 33}, {33, SHIFT, 34}, },
			{{-1, ERROR, 15}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 17}, {33, SHIFT, 47}, },
			{{-1, ERROR, 18}, {4, SHIFT, 48}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 20}, {33, SHIFT, 51}, },
			{{-1, REDUCE, 70}, {3, SHIFT, 52}, {7, SHIFT, 53}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 23}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 23}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 29}, {5, SHIFT, 14}, },
			{{-1, ERROR, 30}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 31}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 32}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 33}, {3, SHIFT, 81}, },
			{{-1, REDUCE, 72}, {3, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 44}, {12, SHIFT, 84}, },
			{{-1, ERROR, 45}, {6, SHIFT, 85}, {9, SHIFT, 29}, {14, SHIFT, 30}, {17, SHIFT, 31}, {19, SHIFT, 32}, {31, SHIFT, 33}, {33, SHIFT, 34}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 70}, {7, SHIFT, 53}, },
			{{-1, ERROR, 48}, {5, SHIFT, 14}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 50}, {4, SHIFT, 89}, },
			{{-1, ERROR, 51}, {3, SHIFT, 52}, },
			{{-1, ERROR, 52}, {4, SHIFT, 90}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, ERROR, 53}, {1, SHIFT, 92}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 56}, {17, SHIFT, 93}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 58}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 72}, {3, SHIFT, 95}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 64}, {15, SHIFT, 96}, },
			{{-1, REDUCE, 39}, {20, SHIFT, 97}, },
			{{-1, REDUCE, 41}, {21, SHIFT, 98}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 45}, {23, SHIFT, 99}, },
			{{-1, REDUCE, 47}, {12, SHIFT, 100}, },
			{{-1, REDUCE, 49}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 51}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 53}, {27, SHIFT, 103}, },
			{{-1, REDUCE, 55}, {28, SHIFT, 104}, },
			{{-1, REDUCE, 57}, {26, SHIFT, 105}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 78}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 106}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 79}, {18, SHIFT, 108}, },
			{{-1, ERROR, 80}, {2, SHIFT, 109}, },
			{{-1, ERROR, 81}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 82}, {1, SHIFT, 57}, {3, SHIFT, 58}, {4, SHIFT, 111}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 83}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 84}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {32, SHIFT, 115}, {33, SHIFT, 62}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 87}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 89}, {5, SHIFT, 14}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, ERROR, 90}, {5, SHIFT, 14}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, ERROR, 91}, {4, SHIFT, 122}, },
			{{-1, ERROR, 92}, {8, SHIFT, 123}, },
			{{-1, ERROR, 93}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 94}, {4, SHIFT, 125}, },
			{{-1, ERROR, 95}, {1, SHIFT, 57}, {3, SHIFT, 58}, {4, SHIFT, 126}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 96}, {5, SHIFT, 14}, },
			{{-1, ERROR, 97}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 98}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 99}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 100}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 101}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 102}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 103}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, ERROR, 104}, {1, SHIFT, 57}, {3, SHIFT, 58}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 44}, {23, SHIFT, 99}, },
			{{-1, ERROR, 108}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 110}, {4, SHIFT, 138}, },
			{{-1, ERROR, 111}, {2, SHIFT, 139}, },
			{{-1, REDUCE, 78}, {0, SHIFT, 140}, },
			{{-1, ERROR, 113}, {4, SHIFT, 143}, },
			{{-1, ERROR, 114}, {8, SHIFT, 144}, },
			{{-1, ERROR, 115}, {2, SHIFT, 145}, },
			{{-1, ERROR, 116}, {2, SHIFT, 146}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 118}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 120}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 122}, {5, SHIFT, 14}, {10, SHIFT, 1}, {11, SHIFT, 2}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 127}, {4, SHIFT, 151}, },
			{{-1, REDUCE, 31}, {16, SHIFT, 152}, },
			{{-1, REDUCE, 40}, {21, SHIFT, 98}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 46}, {12, SHIFT, 100}, },
			{{-1, REDUCE, 48}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 50}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 52}, {27, SHIFT, 103}, },
			{{-1, REDUCE, 54}, {28, SHIFT, 104}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 138}, {2, SHIFT, 154}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 140}, {1, SHIFT, 57}, {3, SHIFT, 58}, {22, SHIFT, 59}, {29, SHIFT, 60}, {30, SHIFT, 61}, {33, SHIFT, 62}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 79}, {0, SHIFT, 140}, },
			{{-1, ERROR, 143}, {2, SHIFT, 157}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 149}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 152}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 76}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 6}, {9, 19}, },
			{{-1, 7}, {13, 26}, },
			{{-1, 8}, {13, 27}, },
			{{-1, 49}, {0, 9}, {3, 15}, {48, 87}, {89, 118}, {90, 120}, {122, 149}, },
			{{-1, 50}, {52, 91}, },
			{{-1, 16}, {15, 46}, {29, 56}, {48, 88}, {87, 117}, {89, 119}, {90, 121}, {96, 128}, {108, 137}, {118, 147}, {120, 148}, {122, 150}, {149, 158}, {152, 159}, },
			{{-1, 35}, {45, 86}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 63}, },
			{{-1, 112}, {30, 64}, {31, 79}, {32, 80}, {58, 94}, {81, 110}, {83, 114}, {84, 116}, {93, 124}, {140, 155}, },
			{{-1, 65}, },
			{{-1, 66}, {97, 129}, },
			{{-1, 67}, {98, 130}, },
			{{-1, 68}, {78, 107}, },
			{{-1, 69}, {99, 131}, },
			{{-1, 70}, {100, 132}, },
			{{-1, 71}, {101, 133}, },
			{{-1, 72}, {102, 134}, },
			{{-1, 73}, {103, 135}, },
			{{-1, 74}, },
			{{-1, 75}, {104, 136}, },
			{{-1, 76}, },
			{{-1, 17}, {0, 10}, {9, 20}, {13, 20}, },
			{{-1, 24}, {25, 55}, },
			{{-1, 11}, {23, 54}, },
			{{-1, 77}, {14, 44}, {45, 44}, },
			{{-1, 12}, },
			{{-1, 22}, },
			{{-1, 153}, },
			{{-1, 141}, {142, 156}, },
			{{-1, 113}, {95, 127}, },
			{{-1, 13}, },
			{{-1, 25}, },
			{{-1, 45}, },
			{{-1, 78}, },
			{{-1, 142}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'bool', 'main()', identif",
			"expecting: identif",
			"expecting: '{', 'entier', 'bool'",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ',', ')', '{', 'entier', 'bool', 'main()', identif",
			"expecting: '}', 'faire', 'si', 'tantque', 'retour', 'ecrire', identif",
			"expecting: '{'",
			"expecting: ')', 'entier', 'bool'",
			"expecting: ',', '(', '[', 'entier', 'bool', 'main()', identif",
			"expecting: 'entier', 'bool'",
			"expecting: '}', 'faire', 'entier', 'bool', 'main()', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identif, EOF",
			"expecting: nombre, '(', '!', 'vrai', 'faux', identif",
			"expecting: '(', '[', '='",
			"expecting: '='",
			"expecting: ',', ')', '{', '[', 'entier', 'bool', 'main()', identif",
			"expecting: ')'",
			"expecting: nombre",
			"expecting: 'tantque'",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', '-', '**', '*', '/', 'ecrire', identif",
			"expecting: ',', ';', '(', ')', '}', '[', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', '-', '**', '*', '/', 'ecrire', identif",
			"expecting: 'alors'",
			"expecting: ',', ';', ')', '}', ']', 'faire', 'si', 'alors', 'tantque', 'faire', 'retour', '|', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', '-', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', '-', '*', 'ecrire', identif",
			"expecting: ',', ';', ')', '}', ']', 'faire', '=', 'si', 'alors', 'tantque', 'faire', 'retour', '|', '&', '<', '+', '-', '*', '/', 'ecrire', identif",
			"expecting: 'faire'",
			"expecting: ';'",
			"expecting: nombre, '(', ')', '!', 'vrai', 'faux', identif",
			"expecting: nombre, '(', '!', 'vrai', 'faux', 'lire()', identif",
			"expecting: ']'",
			"expecting: nombre, '(', 'vrai', 'faux', identif",
			"expecting: ',', ')'",
			"expecting: '}', 'faire', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identif",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 4, 0, 4, 0, 1, 5, 5, 0, 6, 7, 4, 1, 8, 4, 1, 9, 5, 10, 5, 5, 0, 4, 11, 7, 12, 12, 12, 3, 13, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 6, 4, 15, 2, 16, 16, 3, 8, 17, 5, 5, 18, 19, 12, 12, 19, 19, 20, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 19, 19, 19, 19, 12, 30, 31, 12, 32, 12, 33, 11, 6, 7, 0, 2, 2, 16, 34, 12, 16, 32, 7, 12, 12, 35, 35, 35, 35, 35, 35, 19, 12, 24, 7, 6, 16, 31, 36, 16, 34, 31, 31, 0, 7, 0, 7, 0, 2, 5, 6, 19, 19, 16, 37, 23, 23, 25, 26, 27, 28, 29, 29, 6, 31, 6, 12, 36, 36, 31, 19, 6, 6, 0, 0, 7, 0, 19, 7, 6, 6, 36, 36, 6, 0, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
