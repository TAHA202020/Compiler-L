/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PRealvalues node1 = (PRealvalues) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AFalseRealvalues */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ATrueRealvalues */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ANombreRealvalues */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AOrLog */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAndLog */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ALogOperations */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ACmpOperations */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AIdentifSinglevalue */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ANotidentifSinglevalue */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ABooleansSinglevalue */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce ANombreSinglevalue */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AAcallfuncsinglevalue1Singlevalue */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AAcallfuncsinglevalue2Singlevalue */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce AMultiplevaluesValue */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce ASinglevalueValue */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce ABiggerCmp */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce ASmallerCmp */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce ANotequalCmp */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AEqualCmp */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AEntierType */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce APlusOp */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AMinusOp */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AMultOp */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce ADivOp */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce ATrueBooleans */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AFalseBooleans */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AIdentifNparameters */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce ANombreNparameters */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce ABooleansNparameters */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AMultiparamNparam */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce ASingleparamNparam */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce AAffectation */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce AAcondition1Condition */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce AAcondition2Condition */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AAcondition3Condition */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AAcondition4Condition */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AAloop1Loop */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list, false);
            }
            break;
            case 38: /* reduce AAloop2Loop */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce AAelsecondition1Elsecondition */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list, false);
            }
            break;
            case 40: /* reduce AAelsecondition2Elsecondition */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AMultipleExpression */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ASingleExpression */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce AIdentifidentifSingleexpression */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce AIdentifrealvalueSingleexpression */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list, false);
            }
            break;
            case 45: /* reduce ARealvalueidentifSingleexpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce AParameter */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list, false);
            }
            break;
            case 47: /* reduce AMultipleParameters */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce ASingleParameters */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce ADefaultProgramme */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AMainProgramme */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce AAmain1Main */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AAmain2Main */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AAmain3Main */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce AAmain4Main */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce AConditionInstruction */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce AAcallfuncinstruction1Instruction */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce AAcallfuncinstruction2Instruction */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce AReadInstruction */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list, false);
            }
            break;
            case 60: /* reduce AWriteInstruction */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list, false);
            }
            break;
            case 61: /* reduce AAfunction1Function */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list, false);
            }
            break;
            case 62: /* reduce AAfunction2Function */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list, false);
            }
            break;
            case 63: /* reduce AAfunction3Function */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list, false);
            }
            break;
            case 64: /* reduce AAfunction4Function */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list, false);
            }
            break;
            case 65: /* reduce AAfunction5Function */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list, false);
            }
            break;
            case 66: /* reduce AAfunction6Function */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list, false);
            }
            break;
            case 67: /* reduce AAfunction7Function */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list, false);
            }
            break;
            case 68: /* reduce AAfunction8Function */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list, false);
            }
            break;
            case 69: /* reduce ATerminal$Instruction */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$Instruction */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AFalseRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        prealvaluesNode1 = new AFalseRealvalues(tfalseNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ATrueRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        prealvaluesNode1 = new ATrueRealvalues(ttrueNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ANombreRealvalues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRealvalues prealvaluesNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        prealvaluesNode1 = new ANombreRealvalues(tnombreNode2);
        }
	nodeList.add(prealvaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AOrLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLog plogNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        plogNode1 = new AOrLog(torNode2);
        }
	nodeList.add(plogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAndLog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLog plogNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        plogNode1 = new AAndLog(tandNode2);
        }
	nodeList.add(plogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ALogOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperations poperationsNode1;
        {
            // Block
        PLog plogNode2;
        plogNode2 = (PLog)nodeArrayList1.get(0);

        poperationsNode1 = new ALogOperations(plogNode2);
        }
	nodeList.add(poperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ACmpOperations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperations poperationsNode1;
        {
            // Block
        PCmp pcmpNode2;
        pcmpNode2 = (PCmp)nodeArrayList1.get(0);

        poperationsNode1 = new ACmpOperations(pcmpNode2);
        }
	nodeList.add(poperationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdentifSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        psinglevalueNode1 = new AIdentifSinglevalue(tidentifNode2);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANotidentifSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TNot tnotNode2;
        TIdentif tidentifNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        psinglevalueNode1 = new ANotidentifSinglevalue(tnotNode2, tidentifNode3);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABooleansSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        PBooleans pbooleansNode2;
        pbooleansNode2 = (PBooleans)nodeArrayList1.get(0);

        psinglevalueNode1 = new ABooleansSinglevalue(pbooleansNode2);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANombreSinglevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        psinglevalueNode1 = new ANombreSinglevalue(tnombreNode2);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAcallfuncsinglevalue1Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRp trpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        trpNode5 = (TRp)nodeArrayList3.get(0);

        psinglevalueNode1 = new ACallfuncSinglevalue(tidentifNode2, tlpNode3, null, trpNode5);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAcallfuncsinglevalue2Singlevalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinglevalue psinglevalueNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PNparam pnparamNode4;
        TRp trpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);

        psinglevalueNode1 = new ACallfuncSinglevalue(tidentifNode2, tlpNode3, pnparamNode4, trpNode5);
        }
	nodeList.add(psinglevalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMultiplevaluesValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PSinglevalue psinglevalueNode2;
        POperations poperationsNode3;
        PValue pvalueNode4;
        psinglevalueNode2 = (PSinglevalue)nodeArrayList1.get(0);
        poperationsNode3 = (POperations)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pvalueNode1 = new AMultiplevaluesValue(psinglevalueNode2, poperationsNode3, pvalueNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASinglevalueValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PSinglevalue psinglevalueNode2;
        psinglevalueNode2 = (PSinglevalue)nodeArrayList1.get(0);

        pvalueNode1 = new ASinglevalueValue(psinglevalueNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABiggerCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TBigger tbiggerNode2;
        tbiggerNode2 = (TBigger)nodeArrayList1.get(0);

        pcmpNode1 = new ABiggerCmp(tbiggerNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASmallerCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TSmaller tsmallerNode2;
        tsmallerNode2 = (TSmaller)nodeArrayList1.get(0);

        pcmpNode1 = new ASmallerCmp(tsmallerNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANotequalCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TNotequal tnotequalNode2;
        tnotequalNode2 = (TNotequal)nodeArrayList1.get(0);

        pcmpNode1 = new ANotequalCmp(tnotequalNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEqualCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmp pcmpNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcmpNode1 = new AEqualCmp(tequalNode2);
        }
	nodeList.add(pcmpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        popNode1 = new APlusOp(tplusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        popNode1 = new AMinusOp(tminusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMultOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        popNode1 = new AMultOp(tmultNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADivOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        popNode1 = new ADivOp(tdivNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATrueBooleans */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleans pbooleansNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleansNode1 = new ATrueBooleans(ttrueNode2);
        }
	nodeList.add(pbooleansNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFalseBooleans */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleans pbooleansNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleansNode1 = new AFalseBooleans(tfalseNode2);
        }
	nodeList.add(pbooleansNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdentifNparameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparameters pnparametersNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pnparametersNode1 = new AIdentifNparameters(tidentifNode2);
        }
	nodeList.add(pnparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANombreNparameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparameters pnparametersNode1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pnparametersNode1 = new ANombreNparameters(tnombreNode2);
        }
	nodeList.add(pnparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABooleansNparameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparameters pnparametersNode1;
        {
            // Block
        PBooleans pbooleansNode2;
        pbooleansNode2 = (PBooleans)nodeArrayList1.get(0);

        pnparametersNode1 = new ABooleansNparameters(pbooleansNode2);
        }
	nodeList.add(pnparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMultiparamNparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparam pnparamNode1;
        {
            // Block
        PNparameters pnparametersNode2;
        TVirgul tvirgulNode3;
        PNparam pnparamNode4;
        pnparametersNode2 = (PNparameters)nodeArrayList1.get(0);
        tvirgulNode3 = (TVirgul)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);

        pnparamNode1 = new AMultiparamNparam(pnparametersNode2, tvirgulNode3, pnparamNode4);
        }
	nodeList.add(pnparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASingleparamNparam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNparam pnparamNode1;
        {
            // Block
        PNparameters pnparametersNode2;
        pnparametersNode2 = (PNparameters)nodeArrayList1.get(0);

        pnparamNode1 = new ASingleparamNparam(pnparametersNode2);
        }
	nodeList.add(pnparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TEqual tequalNode3;
        PValue pvalueNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        paffectationNode1 = new AAffectation(tidentifNode2, tequalNode3, pvalueNode4);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAcondition1Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TAlors talorsNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndfunc tendfuncNode9;
        @SuppressWarnings("unused") Object nullNode10 = null;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        talorsNode6 = (TAlors)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode9 = (TEndfunc)nodeArrayList7.get(0);

        pconditionNode1 = new ACondition(tsiNode2, tlpNode3, pexpressionNode4, trpNode5, talorsNode6, tstartfuncNode7, listNode8, tendfuncNode9, null);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAcondition2Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TAlors talorsNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        @SuppressWarnings("unused") Object nullNode11 = null;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        talorsNode6 = (TAlors)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList8.get(0);

        pconditionNode1 = new ACondition(tsiNode2, tlpNode3, pexpressionNode4, trpNode5, talorsNode6, tstartfuncNode7, listNode9, tendfuncNode10, null);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAcondition3Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TAlors talorsNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndfunc tendfuncNode9;
        PElsecondition pelseconditionNode10;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        talorsNode6 = (TAlors)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode9 = (TEndfunc)nodeArrayList7.get(0);
        pelseconditionNode10 = (PElsecondition)nodeArrayList8.get(0);

        pconditionNode1 = new ACondition(tsiNode2, tlpNode3, pexpressionNode4, trpNode5, talorsNode6, tstartfuncNode7, listNode8, tendfuncNode9, pelseconditionNode10);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAcondition4Condition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TSi tsiNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TAlors talorsNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        PElsecondition pelseconditionNode11;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        talorsNode6 = (TAlors)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList8.get(0);
        pelseconditionNode11 = (PElsecondition)nodeArrayList9.get(0);

        pconditionNode1 = new ACondition(tsiNode2, tlpNode3, pexpressionNode4, trpNode5, talorsNode6, tstartfuncNode7, listNode9, tendfuncNode10, pelseconditionNode11);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAloop1Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TDo tdoNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndfunc tendfuncNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tdoNode6 = (TDo)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        tendfuncNode9 = (TEndfunc)nodeArrayList7.get(0);

        ploopNode1 = new ALoop(twhileNode2, tlpNode3, pexpressionNode4, trpNode5, tdoNode6, tstartfuncNode7, listNode8, tendfuncNode9);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAloop2Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        TLp tlpNode3;
        PExpression pexpressionNode4;
        TRp trpNode5;
        TDo tdoNode6;
        TStartfunc tstartfuncNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndfunc tendfuncNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tdoNode6 = (TDo)nodeArrayList5.get(0);
        tstartfuncNode7 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendfuncNode10 = (TEndfunc)nodeArrayList8.get(0);

        ploopNode1 = new ALoop(twhileNode2, tlpNode3, pexpressionNode4, trpNode5, tdoNode6, tstartfuncNode7, listNode9, tendfuncNode10);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAelsecondition1Elsecondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsecondition pelseconditionNode1;
        {
            // Block
        TElse telseNode2;
        TStartfunc tstartfuncNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEndfunc tendfuncNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tstartfuncNode3 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        }
        tendfuncNode5 = (TEndfunc)nodeArrayList3.get(0);

        pelseconditionNode1 = new AElsecondition(telseNode2, tstartfuncNode3, listNode4, tendfuncNode5);
        }
	nodeList.add(pelseconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAelsecondition2Elsecondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsecondition pelseconditionNode1;
        {
            // Block
        TElse telseNode2;
        TStartfunc tstartfuncNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tstartfuncNode3 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList4.get(0);

        pelseconditionNode1 = new AElsecondition(telseNode2, tstartfuncNode3, listNode5, tendfuncNode6);
        }
	nodeList.add(pelseconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMultipleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSingleexpression psingleexpressionNode2;
        PLog plogNode3;
        PExpression pexpressionNode4;
        psingleexpressionNode2 = (PSingleexpression)nodeArrayList1.get(0);
        plogNode3 = (PLog)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultipleExpression(psingleexpressionNode2, plogNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASingleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSingleexpression psingleexpressionNode2;
        psingleexpressionNode2 = (PSingleexpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ASingleExpression(psingleexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIdentifidentifSingleexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleexpression psingleexpressionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PCmp pcmpNode3;
        TIdentif tidentifNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        pcmpNode3 = (PCmp)nodeArrayList2.get(0);
        tidentifNode4 = (TIdentif)nodeArrayList3.get(0);

        psingleexpressionNode1 = new AIdentifidentifSingleexpression(tidentifNode2, pcmpNode3, tidentifNode4);
        }
	nodeList.add(psingleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIdentifrealvalueSingleexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleexpression psingleexpressionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        PCmp pcmpNode3;
        PRealvalues prealvaluesNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        pcmpNode3 = (PCmp)nodeArrayList2.get(0);
        prealvaluesNode4 = (PRealvalues)nodeArrayList3.get(0);

        psingleexpressionNode1 = new AIdentifrealvalueSingleexpression(tidentifNode2, pcmpNode3, prealvaluesNode4);
        }
	nodeList.add(psingleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ARealvalueidentifSingleexpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSingleexpression psingleexpressionNode1;
        {
            // Block
        PRealvalues prealvaluesNode2;
        PCmp pcmpNode3;
        TIdentif tidentifNode4;
        prealvaluesNode2 = (PRealvalues)nodeArrayList1.get(0);
        pcmpNode3 = (PCmp)nodeArrayList2.get(0);
        tidentifNode4 = (TIdentif)nodeArrayList3.get(0);

        psingleexpressionNode1 = new ARealvalueidentifSingleexpression(prealvaluesNode2, pcmpNode3, tidentifNode4);
        }
	nodeList.add(psingleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultipleParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        TVirgul tvirgulNode3;
        PParameters pparametersNode4;
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        tvirgulNode3 = (TVirgul)nodeArrayList2.get(0);
        pparametersNode4 = (PParameters)nodeArrayList3.get(0);

        pparametersNode1 = new AMultipleParameters(pparameterNode2, tvirgulNode3, pparametersNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASingleParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);

        pparametersNode1 = new ASingleParameters(pparameterNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ADefaultProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PFunction pfunctionNode2;
        PProgramme pprogrammeNode3;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);
        pprogrammeNode3 = (PProgramme)nodeArrayList2.get(0);

        pprogrammeNode1 = new ADefaultProgramme(pfunctionNode2, pprogrammeNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMainProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PMain pmainNode2;
        pmainNode2 = (PMain)nodeArrayList1.get(0);

        pprogrammeNode1 = new AMainProgramme(pmainNode2);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAmain1Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList3.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, null, tstartfuncNode4, listNode5, tendfuncNode6);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAmain2Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        PParameters pparametersNode3;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndfunc tendfuncNode6;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList2.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList3.get(0);
        {
            // Block
        }
        tendfuncNode6 = (TEndfunc)nodeArrayList4.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, pparametersNode3, tstartfuncNode4, listNode5, tendfuncNode6);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAmain3Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList4.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, null, tstartfuncNode4, listNode6, tendfuncNode7);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAmain4Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        TMainfunc tmainfuncNode2;
        PParameters pparametersNode3;
        TStartfunc tstartfuncNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndfunc tendfuncNode7;
        tmainfuncNode2 = (TMainfunc)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList2.get(0);
        tstartfuncNode4 = (TStartfunc)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendfuncNode7 = (TEndfunc)nodeArrayList5.get(0);

        pmainNode1 = new AMain(tmainfuncNode2, pparametersNode3, tstartfuncNode4, listNode6, tendfuncNode7);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PAffectation paffectationNode2;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);

        pinstructionNode1 = new AAffectationInstruction(paffectationNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AConditionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PCondition pconditionNode2;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);

        pinstructionNode1 = new AConditionInstruction(pconditionNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAcallfuncinstruction1Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRp trpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        trpNode5 = (TRp)nodeArrayList3.get(0);
        tpvNode6 = (TPv)nodeArrayList4.get(0);

        pinstructionNode1 = new ACallfuncInstruction(tidentifNode2, tlpNode3, null, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAcallfuncinstruction2Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PNparam pnparamNode4;
        TRp trpNode5;
        TPv tpvNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pnparamNode4 = (PNparam)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pinstructionNode1 = new ACallfuncInstruction(tidentifNode2, tlpNode3, pnparamNode4, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AReadInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TEqual tequalNode3;
        TRead treadNode4;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        treadNode4 = (TRead)nodeArrayList3.get(0);

        pinstructionNode1 = new AReadInstruction(tidentifNode2, tequalNode3, treadNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AWriteInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TWrite twriteNode2;
        TLp tlpNode3;
        PValue pvalueNode4;
        TRp trpNode5;
        TPv tpvNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tpvNode6 = (TPv)nodeArrayList5.get(0);

        pinstructionNode1 = new AWriteInstruction(twriteNode2, tlpNode3, pvalueNode4, trpNode5, tpvNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TReturn treturnNode10;
        TLp tlpNode11;
        PValue pvalueNode12;
        TRp trpNode13;
        TPv tpvNode14;
        TEndfunc tendfuncNode15;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        }
        treturnNode10 = (TReturn)nodeArrayList6.get(0);
        tlpNode11 = (TLp)nodeArrayList7.get(0);
        pvalueNode12 = (PValue)nodeArrayList8.get(0);
        trpNode13 = (TRp)nodeArrayList9.get(0);
        tpvNode14 = (TPv)nodeArrayList10.get(0);
        tendfuncNode15 = (TEndfunc)nodeArrayList11.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode9, treturnNode10, tlpNode11, pvalueNode12, trpNode13, tpvNode14, tendfuncNode15);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TReturn treturnNode10;
        TLp tlpNode11;
        PValue pvalueNode12;
        TRp trpNode13;
        TPv tpvNode14;
        TEndfunc tendfuncNode15;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        treturnNode10 = (TReturn)nodeArrayList7.get(0);
        tlpNode11 = (TLp)nodeArrayList8.get(0);
        pvalueNode12 = (PValue)nodeArrayList9.get(0);
        trpNode13 = (TRp)nodeArrayList10.get(0);
        tpvNode14 = (TPv)nodeArrayList11.get(0);
        tendfuncNode15 = (TEndfunc)nodeArrayList12.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode9, treturnNode10, tlpNode11, pvalueNode12, trpNode13, tpvNode14, tendfuncNode15);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAfunction3Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TReturn treturnNode10;
        TLp tlpNode11;
        PValue pvalueNode12;
        TRp trpNode13;
        TPv tpvNode14;
        TEndfunc tendfuncNode15;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        }
        treturnNode10 = (TReturn)nodeArrayList7.get(0);
        tlpNode11 = (TLp)nodeArrayList8.get(0);
        pvalueNode12 = (PValue)nodeArrayList9.get(0);
        trpNode13 = (TRp)nodeArrayList10.get(0);
        tpvNode14 = (TPv)nodeArrayList11.get(0);
        tendfuncNode15 = (TEndfunc)nodeArrayList12.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, treturnNode10, tlpNode11, pvalueNode12, trpNode13, tpvNode14, tendfuncNode15);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAfunction4Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TReturn treturnNode10;
        TLp tlpNode11;
        PValue pvalueNode12;
        TRp trpNode13;
        TPv tpvNode14;
        TEndfunc tendfuncNode15;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        pparametersNode7 = (PParameters)nodeArrayList6.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList7.get(0);
        {
            // Block
        }
        treturnNode10 = (TReturn)nodeArrayList8.get(0);
        tlpNode11 = (TLp)nodeArrayList9.get(0);
        pvalueNode12 = (PValue)nodeArrayList10.get(0);
        trpNode13 = (TRp)nodeArrayList11.get(0);
        tpvNode14 = (TPv)nodeArrayList12.get(0);
        tendfuncNode15 = (TEndfunc)nodeArrayList13.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode9, treturnNode10, tlpNode11, pvalueNode12, trpNode13, tpvNode14, tendfuncNode15);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAfunction5Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        TLp tlpNode12;
        PValue pvalueNode13;
        TRp trpNode14;
        TPv tpvNode15;
        TEndfunc tendfuncNode16;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        treturnNode11 = (TReturn)nodeArrayList7.get(0);
        tlpNode12 = (TLp)nodeArrayList8.get(0);
        pvalueNode13 = (PValue)nodeArrayList9.get(0);
        trpNode14 = (TRp)nodeArrayList10.get(0);
        tpvNode15 = (TPv)nodeArrayList11.get(0);
        tendfuncNode16 = (TEndfunc)nodeArrayList12.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, null, tstartfuncNode8, listNode10, treturnNode11, tlpNode12, pvalueNode13, trpNode14, tpvNode15, tendfuncNode16);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAfunction6Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        TLp tlpNode12;
        PValue pvalueNode13;
        TRp trpNode14;
        TPv tpvNode15;
        TEndfunc tendfuncNode16;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        treturnNode11 = (TReturn)nodeArrayList8.get(0);
        tlpNode12 = (TLp)nodeArrayList9.get(0);
        pvalueNode13 = (PValue)nodeArrayList10.get(0);
        trpNode14 = (TRp)nodeArrayList11.get(0);
        tpvNode15 = (TPv)nodeArrayList12.get(0);
        tendfuncNode16 = (TEndfunc)nodeArrayList13.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, null, tstartfuncNode8, listNode10, treturnNode11, tlpNode12, pvalueNode13, trpNode14, tpvNode15, tendfuncNode16);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAfunction7Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        TLp tlpNode12;
        PValue pvalueNode13;
        TRp trpNode14;
        TPv tpvNode15;
        TEndfunc tendfuncNode16;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        trpNode6 = (TRp)nodeArrayList4.get(0);
        pparametersNode7 = (PParameters)nodeArrayList5.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        treturnNode11 = (TReturn)nodeArrayList8.get(0);
        tlpNode12 = (TLp)nodeArrayList9.get(0);
        pvalueNode13 = (PValue)nodeArrayList10.get(0);
        trpNode14 = (TRp)nodeArrayList11.get(0);
        tpvNode15 = (TPv)nodeArrayList12.get(0);
        tendfuncNode16 = (TEndfunc)nodeArrayList13.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, null, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, treturnNode11, tlpNode12, pvalueNode13, trpNode14, tpvNode15, tendfuncNode16);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAfunction8Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TLp tlpNode4;
        PParameters pparametersNode5;
        TRp trpNode6;
        PParameters pparametersNode7;
        TStartfunc tstartfuncNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        TLp tlpNode12;
        PValue pvalueNode13;
        TRp trpNode14;
        TPv tpvNode15;
        TEndfunc tendfuncNode16;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlpNode4 = (TLp)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trpNode6 = (TRp)nodeArrayList5.get(0);
        pparametersNode7 = (PParameters)nodeArrayList6.get(0);
        tstartfuncNode8 = (TStartfunc)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        treturnNode11 = (TReturn)nodeArrayList9.get(0);
        tlpNode12 = (TLp)nodeArrayList10.get(0);
        pvalueNode13 = (PValue)nodeArrayList11.get(0);
        trpNode14 = (TRp)nodeArrayList12.get(0);
        tpvNode15 = (TPv)nodeArrayList13.get(0);
        tendfuncNode16 = (TEndfunc)nodeArrayList14.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifNode3, tlpNode4, pparametersNode5, trpNode6, pparametersNode7, tstartfuncNode8, listNode10, treturnNode11, tlpNode12, pvalueNode13, trpNode14, tpvNode15, tendfuncNode16);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstruction pinstructionNode1;
        pinstructionNode1 = (PInstruction)nodeArrayList1.get(0);
	if(pinstructionNode1 != null)
	{
	  listNode2.add(pinstructionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Instruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInstruction pinstructionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstructionNode2 = (PInstruction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstructionNode2 != null)
	{
	  listNode3.add(pinstructionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {14, SHIFT, 2}, {15, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {33, ACCEPT, -1}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: nombre, 'true', 'false'",
			"expecting: EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
